
Flash_HAL_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000373c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003924  08003924  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800392c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000030  08003958  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003958  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad09  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b8c  00000000  00000000  0002ad65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b2c  00000000  00000000  0002dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085b1  00000000  00000000  000536fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8505  00000000  00000000  0005bcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001441b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  00144230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038ac 	.word	0x080038ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080038ac 	.word	0x080038ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <UART2_Init>:
// ===================================================
// PA.0 = UART4_TX (AF8)   |  PA.1 = UART4_RX (AF8)      
// PB.6 = USART1_TX (AF7)  |  PB.7 = USART1_RX (AF7) 
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void UART2_Init(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <UART2_Init+0x40>)
 80004de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <UART2_Init+0x40>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <UART2_Init+0x40>)
 80004ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <UART2_Init+0x40>)
 80004f0:	f023 030c 	bic.w	r3, r3, #12
 80004f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <UART2_Init+0x40>)
 80004fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004fe:	4a06      	ldr	r2, [pc, #24]	; (8000518 <UART2_Init+0x40>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000508:	f000 f80a 	bl	8000520 <UART2_GPIO_Init>
	USART_Init(USART2);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <UART2_Init+0x44>)
 800050e:	f000 f843 	bl	8000598 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40004400 	.word	0x40004400

08000520 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIODEN;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <UART2_GPIO_Init+0x70>)
 8000526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <UART2_GPIO_Init+0x70>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PD5 = USART2_TX (AF7)
	// PD6 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOD->MODER   &= ~(0xF << (2*5));	// Clear bits
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000536:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800053a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=   0xA << (2*5);      		
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <UART2_GPIO_Init+0x74>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000542:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000546:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0]  |=   0x77<< (4*5);       	
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <UART2_GPIO_Init+0x74>)
 800054a:	6a1b      	ldr	r3, [r3, #32]
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <UART2_GPIO_Init+0x74>)
 800054e:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 8000552:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOD->OSPEEDR |=   0xF<<(2*5); 					 	
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <UART2_GPIO_Init+0x74>)
 800055a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800055e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOD->PUPDR   &= ~(0xF<<(2*5));
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000566:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800056a:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR   |=   0x5<<(2*5);    				
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <UART2_GPIO_Init+0x74>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <UART2_GPIO_Init+0x74>)
 8000572:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000576:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOD->OTYPER  &=  ~(0x3<<5) ;       	
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <UART2_GPIO_Init+0x74>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <UART2_GPIO_Init+0x74>)
 800057e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000582:	6053      	str	r3, [r2, #4]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	48000c00 	.word	0x48000c00

08000598 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f023 0201 	bic.w	r2, r3, #1
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f242 028d 	movw	r2, #8333	; 0x208d
 80005d6:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f043 020c 	orr.w	r2, r3, #12
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <USART_Init+0xfc>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d129      	bne.n	8000640 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f043 0220 	orr.w	r2, r3, #32
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 0210 	bic.w	r2, r3, #16
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f023 0201 	bic.w	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a15      	ldr	r2, [pc, #84]	; (8000698 <USART_Init+0x100>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10b      	bne.n	8000660 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6a1b      	ldr	r3, [r3, #32]
 800064c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <USART_Init+0x104>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <USART_Init+0x104>)
 800065a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800065e:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f043 0201 	orr.w	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 800066c:	bf00      	nop
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800067a:	bf00      	nop
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f9      	beq.n	800067c <USART_Init+0xe4>
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40004c00 	.word	0x40004c00
 8000698:	40004400 	.word	0x40004400
 800069c:	40013800 	.word	0x40013800

080006a0 <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e014      	b.n	80006dc <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80006b2:	bf00      	nop
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f9      	beq.n	80006b4 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80006ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006d2:	f000 f819 	bl	8000708 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8e6      	bhi.n	80006b2 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80006e4:	bf00      	nop
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	61da      	str	r2, [r3, #28]
}   
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2264      	movs	r2, #100	; 0x64
 8000714:	fb02 f203 	mul.w	r2, r2, r3
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <USART_Delay+0x38>)
 800071a:	fba3 1302 	umull	r1, r3, r3, r2
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	0852      	lsrs	r2, r2, #1
 8000722:	4413      	add	r3, r2
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3b01      	subs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f9      	bne.n	8000728 <USART_Delay+0x20>
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	24924925 	.word	0x24924925

08000744 <save_to_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void save_to_flash(uint8_t *data)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	466b      	mov	r3, sp
 800074e:	461d      	mov	r5, r3
	volatile uint64_t data_to_FLASH[(strlen((char*)data)/8)	+ (int)((strlen((char*)data) % 8) != 0)];
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff fd39 	bl	80001c8 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	08dc      	lsrs	r4, r3, #3
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fd34 	bl	80001c8 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	18e0      	adds	r0, r4, r3
 8000772:	4603      	mov	r3, r0
 8000774:	3b01      	subs	r3, #1
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
 8000778:	4601      	mov	r1, r0
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	f04f 0400 	mov.w	r4, #0
 8000786:	0194      	lsls	r4, r2, #6
 8000788:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800078c:	018b      	lsls	r3, r1, #6
 800078e:	4601      	mov	r1, r0
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	f04f 0400 	mov.w	r4, #0
 800079c:	0194      	lsls	r4, r2, #6
 800079e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80007a2:	018b      	lsls	r3, r1, #6
 80007a4:	00c3      	lsls	r3, r0, #3
 80007a6:	3307      	adds	r3, #7
 80007a8:	3307      	adds	r3, #7
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	ebad 0d03 	sub.w	sp, sp, r3
 80007b2:	466b      	mov	r3, sp
 80007b4:	3307      	adds	r3, #7
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 80007bc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd01 	bl	80001c8 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	4620      	mov	r0, r4
 80007ce:	f003 f85d 	bl	800388c <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80007d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f860 	bl	800389c <strcpy>
	volatile uint64_t data_length = (strlen((char*)data_to_FLASH)/ 8) + (int)((strlen((char*)data_to_FLASH) % 8) != 0);
 80007dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fcf2 	bl	80001c8 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	08dc      	lsrs	r4, r3, #3
 80007e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fcec 	bl	80001c8 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4423      	add	r3, r4
 8000802:	f04f 0400 	mov.w	r4, #0
 8000806:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	pages = (strlen((char*)data)/page_size) + (int)((strlen((char*)data) % page_size) != 0);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff fcdc 	bl	80001c8 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	0adb      	lsrs	r3, r3, #11
 8000814:	b29c      	uxth	r4, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fcd6 	bl	80001c8 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000822:	2b00      	cmp	r3, #0
 8000824:	bf14      	ite	ne
 8000826:	2301      	movne	r3, #1
 8000828:	2300      	moveq	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	4423      	add	r3, r4
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <save_to_flash+0x190>)
 8000834:	801a      	strh	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000836:	f000 fcbd 	bl	80011b4 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 800083a:	f000 fced 	bl	8001218 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.Page = 0x1FF;
 8000842:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000846:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
	  EraseInitStruct.NbPages = pages;
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <save_to_flash+0x190>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800085c:	f107 0214 	add.w	r2, r7, #20
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fdb0 	bl	80013cc <HAL_FLASHEx_Erase>
 800086c:	4603      	mov	r3, r0
 800086e:	72fb      	strb	r3, [r7, #11]
	  while(index <= data_length)
 8000870:	e01d      	b.n	80008ae <save_to_flash+0x16a>
	  {
		  if (status == HAL_OK)
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d119      	bne.n	80008ae <save_to_flash+0x16a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]); //_WORD  _FAST ( No interrupt)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	4916      	ldr	r1, [pc, #88]	; (80008d8 <save_to_flash+0x194>)
 800087e:	4419      	add	r1, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	e9d3 3400 	ldrd	r3, r4, [r3]
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fc23 	bl	80010dc <HAL_FLASH_Program>
 8000896:	4603      	mov	r3, r0
 8000898:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d105      	bne.n	80008ae <save_to_flash+0x16a>
			  {
				  write_cnt += 8;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	3308      	adds	r3, #8
 80008a6:	613b      	str	r3, [r7, #16]
				  index++;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
	  while(index <= data_length)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f04f 0400 	mov.w	r4, #0
 80008b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80008b8:	42a2      	cmp	r2, r4
 80008ba:	bf08      	it	eq
 80008bc:	4299      	cmpeq	r1, r3
 80008be:	d2d8      	bcs.n	8000872 <save_to_flash+0x12e>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 80008c0:	f000 fcc6 	bl	8001250 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 80008c4:	f000 fc98 	bl	80011f8 <HAL_FLASH_Lock>
 80008c8:	46ad      	mov	sp, r5
}
 80008ca:	bf00      	nop
 80008cc:	3738      	adds	r7, #56	; 0x38
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	080ff800 	.word	0x080ff800

080008dc <read_flash>:

void read_flash(uint8_t* data)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <read_flash+0x74>)
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d020      	beq.n	800093c <read_flash+0x60>
		{
			data[read_cnt] = (uint8_t)read_data;
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	0a19      	lsrs	r1, r3, #8
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	3301      	adds	r3, #1
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	b2ca      	uxtb	r2, r1
 8000914:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	0c19      	lsrs	r1, r3, #16
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3302      	adds	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	0e19      	lsrs	r1, r3, #24
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	3303      	adds	r3, #3
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3304      	adds	r3, #4
 800093a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000942:	d1d1      	bne.n	80008e8 <read_flash+0xc>
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	080ff800 	.word	0x080ff800

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b091      	sub	sp, #68	; 0x44
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fa5d 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f855 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f8f5 	bl	8000b50 <MX_GPIO_Init>
  UART2_Init();
 8000966:	f7ff fdb7 	bl	80004d8 <UART2_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f8c1 	bl	8000af0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char write_data[16];
  memset(write_data, 0, sizeof(write_data));
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2210      	movs	r2, #16
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff88 	bl	800388c <memset>
  strcpy(write_data, "Hello Insa Cul");
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <main+0xb0>)
 8000982:	461c      	mov	r4, r3
 8000984:	4613      	mov	r3, r2
 8000986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000988:	c407      	stmia	r4!, {r0, r1, r2}
 800098a:	8023      	strh	r3, [r4, #0]
 800098c:	3402      	adds	r4, #2
 800098e:	0c1b      	lsrs	r3, r3, #16
 8000990:	7023      	strb	r3, [r4, #0]
  char *write_data_p = write_data;
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

  save_to_flash((uint8_t*) write_data_p);
 8000998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800099a:	f7ff fed3 	bl	8000744 <save_to_flash>

  char read_data[16];
  memset(read_data, 0, sizeof(read_data));
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2210      	movs	r2, #16
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 ff71 	bl	800388c <memset>
  read_flash((uint8_t*)read_data);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff95 	bl	80008dc <read_flash>
  char vol = read_data[0];
 80009b2:	793b      	ldrb	r3, [r7, #4]
 80009b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int voltage=read_data[0];
 80009b8:	793b      	ldrb	r3, [r7, #4]
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  int SOC=read_data[1];
 80009bc:	797b      	ldrb	r3, [r7, #5]
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  int Current=read_data[2];
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  char cu = read_data[-1];
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int i=0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((read_data[i]) != '\0'){
 80009ce:	e008      	b.n	80009e2 <main+0x8e>
	  char a=read_data[i];
 80009d0:	1d3a      	adds	r2, r7, #4
 80009d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  i++;
 80009dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009de:	3301      	adds	r3, #1
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((read_data[i]) != '\0'){
 80009e2:	1d3a      	adds	r2, r7, #4
 80009e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f0      	bne.n	80009d0 <main+0x7c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	USART_Write(USART2, (uint8_t *)read_data, strlen(read_data));
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fbe9 	bl	80001c8 <strlen>
 80009f6:	4602      	mov	r2, r0
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <main+0xb4>)
 80009fe:	f7ff fe4f 	bl	80006a0 <USART_Write>
 8000a02:	e7f4      	b.n	80009ee <main+0x9a>
 8000a04:	080038c4 	.word	0x080038c4
 8000a08:	40004400 	.word	0x40004400

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0b8      	sub	sp, #224	; 0xe0
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a16:	2244      	movs	r2, #68	; 0x44
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 ff36 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2288      	movs	r2, #136	; 0x88
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 ff28 	bl	800388c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a50:	2303      	movs	r3, #3
 8000a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 f80f 	bl	8001a9c <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f8cc 	bl	8000c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fbdb 	bl	8002268 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ab8:	f000 f8b2 	bl	8000c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fdd2 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ad2:	f000 f8a5 	bl	8000c20 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ada:	f000 ff89 	bl	80019f0 <HAL_PWREx_ControlVoltageScaling>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ae4:	f000 f89c 	bl	8000c20 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	37e0      	adds	r7, #224	; 0xe0
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <MX_USART2_UART_Init+0x5c>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b34:	f002 fa4c 	bl	8002fd0 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 f86f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000060 	.word	0x20000060
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 fee9 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_GPIO_Init+0xc8>)
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_GPIO_Init+0xcc>)
 8000be8:	f000 fd34 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bec:	2320      	movs	r3, #32
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f000 fd25 	bl	8001654 <HAL_GPIO_Init>

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	10210000 	.word	0x10210000
 8000c1c:	48000800 	.word	0x48000800

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6613      	str	r3, [r2, #96]	; 0x60
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0x7c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d128      	bne.n	8000cec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x80>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 fcb4 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8be 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <SystemInit+0x64>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <SystemInit+0x64>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SystemInit+0x68>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <SystemInit+0x68>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SystemInit+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <SystemInit+0x68>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SystemInit+0x68>)
 8000d84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <SystemInit+0x68>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SystemInit+0x68>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <SystemInit+0x68>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <SystemInit+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SystemInit+0x64>)
 8000daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dae:	609a      	str	r2, [r3, #8]
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ffc6 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000de6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <LoopForever+0x16>)
	cmp	r2, r3
 8000dee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 fd27 	bl	8003844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fdad 	bl	8000954 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e00:	0800392c 	.word	0x0800392c
	ldr	r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e08:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8000e0c:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8000e10:	200000e8 	.word	0x200000e8

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_Init+0x3c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_Init+0x3c>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f920 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f80f 	bl	8000e58 <HAL_InitTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	e001      	b.n	8000e4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e46:	f7ff fef3 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d023      	beq.n	8000eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_InitTick+0x70>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f91d 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10f      	bne.n	8000eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d809      	bhi.n	8000ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f8f5 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_InitTick+0x74>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e004      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e001      	b.n	8000eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200000e4 	.word	0x200000e4

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200000e4 	.word	0x200000e4

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5c 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb0 	bl	8001030 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_FLASH_Program+0xd0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_FLASH_Program+0x1e>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e053      	b.n	80011a2 <HAL_FLASH_Program+0xc6>
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_FLASH_Program+0xd0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001100:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001104:	f000 f8b4 	bl	8001270 <FLASH_WaitForLastOperation>
 8001108:	4603      	mov	r3, r0
 800110a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d143      	bne.n	800119a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_FLASH_Program+0xd0>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_FLASH_Program+0xd4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	2b00      	cmp	r3, #0
 8001122:	d009      	beq.n	8001138 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_FLASH_Program+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_FLASH_Program+0xd4>)
 800112a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <HAL_FLASH_Program+0xd0>)
 8001132:	2202      	movs	r2, #2
 8001134:	771a      	strb	r2, [r3, #28]
 8001136:	e002      	b.n	800113e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_FLASH_Program+0xd0>)
 800113a:	2200      	movs	r2, #0
 800113c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f000 f8e7 	bl	800131c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800114e:	2301      	movs	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	e010      	b.n	8001176 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <HAL_FLASH_Program+0x84>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d10a      	bne.n	8001176 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	68b8      	ldr	r0, [r7, #8]
 8001166:	f000 f8fd 	bl	8001364 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d102      	bne.n	8001176 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001170:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001174:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001176:	f24c 3050 	movw	r0, #50000	; 0xc350
 800117a:	f000 f879 	bl	8001270 <FLASH_WaitForLastOperation>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_FLASH_Program+0xd4>)
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <HAL_FLASH_Program+0xd4>)
 8001192:	4013      	ands	r3, r2
 8001194:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001196:	f000 fa19 	bl	80015cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_FLASH_Program+0xd0>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]

  return status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_FLASH_Unlock+0x38>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da0b      	bge.n	80011de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_FLASH_Unlock+0x38>)
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_FLASH_Unlock+0x3c>)
 80011ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_FLASH_Unlock+0x38>)
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_FLASH_Unlock+0x40>)
 80011d0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_FLASH_Unlock+0x38>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da01      	bge.n	80011de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011de:	79fb      	ldrb	r3, [r7, #7]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40022000 	.word	0x40022000
 80011f0:	45670123 	.word	0x45670123
 80011f4:	cdef89ab 	.word	0xcdef89ab

080011f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_FLASH_Lock+0x1c>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_FLASH_Lock+0x1c>)
 8001202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001206:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_FLASH_OB_Unlock+0x2c>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_FLASH_OB_Unlock+0x2c>)
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_FLASH_OB_Unlock+0x30>)
 800122c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_FLASH_OB_Unlock+0x2c>)
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_FLASH_OB_Unlock+0x34>)
 8001232:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40022000 	.word	0x40022000
 8001248:	08192a3b 	.word	0x08192a3b
 800124c:	4c5d6e7f 	.word	0x4c5d6e7f

08001250 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_FLASH_OB_Lock+0x1c>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_FLASH_OB_Lock+0x1c>)
 800125a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800125e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40022000 	.word	0x40022000

08001270 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fe3e 	bl	8000ef8 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800127e:	e00d      	b.n	800129c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	d009      	beq.n	800129c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001288:	f7ff fe36 	bl	8000ef8 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	d801      	bhi.n	800129c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e037      	b.n	800130c <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1eb      	bne.n	8001280 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01e      	beq.n	80012f8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <FLASH_WaitForLastOperation+0xa8>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <FLASH_WaitForLastOperation+0xa8>)
 80012c4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <FLASH_WaitForLastOperation+0x70>
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80012da:	490e      	ldr	r1, [pc, #56]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	618b      	str	r3, [r1, #24]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <FLASH_WaitForLastOperation+0x84>
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80012f2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e009      	b.n	800130c <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FLASH_WaitForLastOperation+0xa4>)
 8001306:	2201      	movs	r2, #1
 8001308:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40022000 	.word	0x40022000
 8001318:	2000000c 	.word	0x2000000c

0800131c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800131c:	b490      	push	{r4, r7}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <FLASH_Program_DoubleWord+0x44>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <FLASH_Program_DoubleWord+0x44>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800133a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800133e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	f04f 0400 	mov.w	r4, #0
 800134a:	0013      	movs	r3, r2
 800134c:	2400      	movs	r4, #0
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	3204      	adds	r2, #4
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bc90      	pop	{r4, r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000

08001364 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800136e:	2340      	movs	r3, #64	; 0x40
 8001370:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <FLASH_Program_Fast+0x64>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <FLASH_Program_Fast+0x64>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001386:	f3ef 8310 	mrs	r3, PRIMASK
 800138a:	60fb      	str	r3, [r7, #12]
  return(result);
 800138c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800138e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	3304      	adds	r3, #4
 800139e:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3304      	adds	r3, #4
 80013a4:	617b      	str	r3, [r7, #20]
    row_index--;
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ef      	bne.n	8001392 <FLASH_Program_Fast+0x2e>
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80013bc:	bf00      	nop
 80013be:	3724      	adds	r7, #36	; 0x24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_FLASHEx_Erase+0x16>
 80013de:	2302      	movs	r3, #2
 80013e0:	e08d      	b.n	80014fe <HAL_FLASHEx_Erase+0x132>
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ec:	f7ff ff40 	bl	8001270 <FLASH_WaitForLastOperation>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d17d      	bne.n	80014f6 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013fa:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001408:	2b00      	cmp	r3, #0
 800140a:	d019      	beq.n	8001440 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800140c:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001412:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001418:	4b3c      	ldr	r3, [pc, #240]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 800142a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800142e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 8001432:	2203      	movs	r2, #3
 8001434:	771a      	strb	r2, [r3, #28]
 8001436:	e016      	b.n	8001466 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 800143a:	2201      	movs	r2, #1
 800143c:	771a      	strb	r2, [r3, #28]
 800143e:	e012      	b.n	8001466 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2e      	ldr	r2, [pc, #184]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001456:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 800145a:	2202      	movs	r2, #2
 800145c:	771a      	strb	r2, [r3, #28]
 800145e:	e002      	b.n	8001466 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 8001462:	2200      	movs	r2, #0
 8001464:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d113      	bne.n	8001496 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f84c 	bl	8001510 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800147c:	f7ff fef8 	bl	8001270 <FLASH_WaitForLastOperation>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 800148a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6153      	str	r3, [r2, #20]
 8001494:	e02d      	b.n	80014f2 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	e01d      	b.n	80014e2 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f000 f857 	bl	8001560 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b6:	f7ff fedb 	bl	8001270 <FLASH_WaitForLastOperation>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_FLASHEx_Erase+0x140>)
 80014c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	601a      	str	r2, [r3, #0]
          break;
 80014da:	e00a      	b.n	80014f2 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3d9      	bcc.n	80014a6 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014f2:	f000 f86b 	bl	80015cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_FLASHEx_Erase+0x13c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

  return status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000000c 	.word	0x2000000c
 800150c:	40022000 	.word	0x40022000

08001510 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <FLASH_MassErase+0x4c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <FLASH_MassErase+0x4c>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <FLASH_MassErase+0x4c>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <FLASH_MassErase+0x4c>)
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <FLASH_MassErase+0x4c>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <FLASH_MassErase+0x4c>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6153      	str	r3, [r2, #20]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40022000 	.word	0x40022000

08001560 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <FLASH_PageErase+0x68>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <FLASH_PageErase+0x68>)
 800157a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800157e:	6153      	str	r3, [r2, #20]
 8001580:	e005      	b.n	800158e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <FLASH_PageErase+0x68>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <FLASH_PageErase+0x68>)
 8001588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <FLASH_PageErase+0x68>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <FLASH_PageErase+0x68>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <FLASH_PageErase+0x68>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <FLASH_PageErase+0x68>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <FLASH_PageErase+0x68>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <FLASH_PageErase+0x68>)
 80015b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ba:	6153      	str	r3, [r2, #20]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40022000 	.word	0x40022000

080015cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <FLASH_FlushCaches+0x80>)
 80015d4:	7f1b      	ldrb	r3, [r3, #28]
 80015d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <FLASH_FlushCaches+0x18>
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d111      	bne.n	8001608 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <FLASH_FlushCaches+0x84>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <FLASH_FlushCaches+0x84>)
 80015ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <FLASH_FlushCaches+0x84>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <FLASH_FlushCaches+0x84>)
 80015f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <FLASH_FlushCaches+0x84>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <FLASH_FlushCaches+0x84>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d002      	beq.n	8001614 <FLASH_FlushCaches+0x48>
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d111      	bne.n	8001638 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <FLASH_FlushCaches+0x84>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <FLASH_FlushCaches+0x84>)
 800161a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <FLASH_FlushCaches+0x84>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <FLASH_FlushCaches+0x84>)
 8001626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800162a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <FLASH_FlushCaches+0x84>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <FLASH_FlushCaches+0x84>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <FLASH_FlushCaches+0x80>)
 800163a:	2200      	movs	r2, #0
 800163c:	771a      	strb	r2, [r3, #28]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e17f      	b.n	8001964 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8171 	beq.w	800195e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d00b      	beq.n	800169c <HAL_GPIO_Init+0x48>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001690:	2b11      	cmp	r3, #17
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d118      	bne.n	800173c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x128>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	6939      	ldr	r1, [r7, #16]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80ac 	beq.w	800195e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_GPIO_Init+0x32c>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_GPIO_Init+0x32c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_GPIO_Init+0x32c>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800181e:	4a59      	ldr	r2, [pc, #356]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x242>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_GPIO_Init+0x334>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x23e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4d      	ldr	r2, [pc, #308]	; (800198c <HAL_GPIO_Init+0x338>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x23a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_GPIO_Init+0x33c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x236>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4b      	ldr	r2, [pc, #300]	; (8001994 <HAL_GPIO_Init+0x340>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x232>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x344>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x22e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_GPIO_Init+0x348>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x22a>
 800187a:	2306      	movs	r3, #6
 800187c:	e00c      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800187e:	2307      	movs	r3, #7
 8001880:	e00a      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001882:	2305      	movs	r3, #5
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001886:	2304      	movs	r3, #4
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x244>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x244>
 8001896:	2300      	movs	r3, #0
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a8:	4936      	ldr	r1, [pc, #216]	; (8001984 <HAL_GPIO_Init+0x330>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae78 	bne.w	8001664 <HAL_GPIO_Init+0x10>
  }
}
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	48001000 	.word	0x48001000
 8001998:	48001400 	.word	0x48001400
 800199c:	48001800 	.word	0x48001800
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_PWREx_GetVoltageRange+0x18>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fe:	d130      	bne.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0c:	d038      	beq.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2232      	movs	r2, #50	; 0x32
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	3301      	adds	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a34:	e002      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d102      	bne.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f2      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	d110      	bne.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e00f      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d007      	beq.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a78:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40007000 	.word	0x40007000
 8001a94:	20000000 	.word	0x20000000
 8001a98:	431bde83 	.word	0x431bde83

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e3d4      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4ba1      	ldr	r3, [pc, #644]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80e4 	beq.w	8001c98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4a>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	f040 808b 	bne.w	8001bf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 8087 	bne.w	8001bf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae6:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x62>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e3ac      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_RCC_OscConfig+0x7c>
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_OscConfig+0x88>
 8001b18:	4b86      	ldr	r3, [pc, #536]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d223      	bcs.n	8001b70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fd3f 	bl	80025b0 <RCC_SetFlashLatencyFromMSIRange>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e38d      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3c:	4b7d      	ldr	r3, [pc, #500]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7c      	ldr	r2, [pc, #496]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4977      	ldr	r1, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	4972      	ldr	r1, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
 8001b6e:	e025      	b.n	8001bbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6f      	ldr	r2, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	496a      	ldr	r1, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8e:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4965      	ldr	r1, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fcff 	bl	80025b0 <RCC_SetFlashLatencyFromMSIRange>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e34d      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bbc:	f000 fc36 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x29c>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_OscConfig+0x2a0>)
 8001bda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bdc:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <HAL_RCC_OscConfig+0x2a4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f939 	bl	8000e58 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d052      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	e331      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d032      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c08:	f7ff f976 	bl	8000ef8 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c10:	f7ff f972 	bl	8000ef8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e31a      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	493b      	ldr	r1, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	4936      	ldr	r1, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e01a      	b.n	8001c98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f943 	bl	8000ef8 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff f93f 	bl	8000ef8 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e2e7      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x1da>
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d074      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x21a>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d10e      	bne.n	8001cce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d064      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d160      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e2c4      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x24a>
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e01d      	b.n	8001d22 <HAL_RCC_OscConfig+0x286>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x26e>
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x286>
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f8e5 	bl	8000ef8 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	e011      	b.n	8001d56 <HAL_RCC_OscConfig+0x2ba>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	080038d4 	.word	0x080038d4
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f8d8 	bl	8000ef8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e280      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4baf      	ldr	r3, [pc, #700]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x2a8>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8c8 	bl	8000ef8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f8c4 	bl	8000ef8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e26c      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	4ba5      	ldr	r3, [pc, #660]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2d0>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d060      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x310>
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d119      	bne.n	8001dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	4b99      	ldr	r3, [pc, #612]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x328>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e249      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b93      	ldr	r3, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4990      	ldr	r1, [pc, #576]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd8:	e040      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d023      	beq.n	8001e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8b      	ldr	r2, [pc, #556]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f883 	bl	8000ef8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff f87f 	bl	8000ef8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e227      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	497c      	ldr	r1, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e018      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a79      	ldr	r2, [pc, #484]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f85f 	bl	8000ef8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f85b 	bl	8000ef8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e203      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e50:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d03c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	4a67      	ldr	r2, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff f83a 	bl	8000ef8 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff f836 	bl	8000ef8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1de      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9a:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ef      	beq.n	8001e88 <HAL_RCC_OscConfig+0x3ec>
 8001ea8:	e01b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f81d 	bl	8000ef8 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f819 	bl	8000ef8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1c1      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ef      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a6 	beq.w	800203c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a43      	ldr	r2, [pc, #268]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1c:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_RCC_OscConfig+0x57c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d118      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x57c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <HAL_RCC_OscConfig+0x57c>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f34:	f7fe ffe0 	bl	8000ef8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3c:	f7fe ffdc 	bl	8000ef8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e184      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_RCC_OscConfig+0x57c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4d8>
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f72:	e024      	b.n	8001fbe <HAL_RCC_OscConfig+0x522>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d110      	bne.n	8001f9e <HAL_RCC_OscConfig+0x502>
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9c:	e00f      	b.n	8001fbe <HAL_RCC_OscConfig+0x522>
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe ff97 	bl	8000ef8 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe ff93 	bl	8000ef8 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e139      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ed      	beq.n	8001fce <HAL_RCC_OscConfig+0x532>
 8001ff2:	e01a      	b.n	800202a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff80 	bl	8000ef8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ffa:	e00f      	b.n	800201c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe ff7c 	bl	8000ef8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d906      	bls.n	800201c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e122      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	4b90      	ldr	r3, [pc, #576]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e8      	bne.n	8001ffc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a8a      	ldr	r2, [pc, #552]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8108 	beq.w	8002256 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	2b02      	cmp	r3, #2
 800204c:	f040 80d0 	bne.w	80021f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002050:	4b83      	ldr	r3, [pc, #524]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	429a      	cmp	r2, r3
 8002062:	d130      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	3b01      	subs	r3, #1
 8002070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d127      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d11f      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002090:	2a07      	cmp	r2, #7
 8002092:	bf14      	ite	ne
 8002094:	2201      	movne	r2, #1
 8002096:	2200      	moveq	r2, #0
 8002098:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209a:	4293      	cmp	r3, r2
 800209c:	d113      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d06e      	beq.n	80021a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d069      	beq.n	80021a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020cc:	4b64      	ldr	r3, [pc, #400]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020d8:	4b61      	ldr	r3, [pc, #388]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b7      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020e8:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5c      	ldr	r2, [pc, #368]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80020ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f4:	f7fe ff00 	bl	8000ef8 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe fefc 	bl	8000ef8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0a4      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_RCC_OscConfig+0x7c8>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800212a:	3a01      	subs	r2, #1
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002134:	0212      	lsls	r2, r2, #8
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800213c:	0852      	lsrs	r2, r2, #1
 800213e:	3a01      	subs	r2, #1
 8002140:	0552      	lsls	r2, r2, #21
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002148:	0852      	lsrs	r2, r2, #1
 800214a:	3a01      	subs	r2, #1
 800214c:	0652      	lsls	r2, r2, #25
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002154:	0912      	lsrs	r2, r2, #4
 8002156:	0452      	lsls	r2, r2, #17
 8002158:	430a      	orrs	r2, r1
 800215a:	4941      	ldr	r1, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002160:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3e      	ldr	r2, [pc, #248]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800216c:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a3b      	ldr	r2, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002178:	f7fe febe 	bl	8000ef8 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7fe feba 	bl	8000ef8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e062      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	e05a      	b.n	8002256 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e059      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d152      	bne.n	8002256 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c8:	f7fe fe96 	bl	8000ef8 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fe92 	bl	8000ef8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e03a      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x734>
 80021ee:	e032      	b.n	8002256 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d02d      	beq.n	8002252 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002200:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	f023 0303 	bic.w	r3, r3, #3
 8002218:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002220:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fe65 	bl	8000ef8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fe61 	bl	8000ef8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e009      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_OscConfig+0x7c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x796>
 8002250:	e001      	b.n	8002256 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	f99d808c 	.word	0xf99d808c

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0c8      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4961      	ldr	r1, [pc, #388]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b0      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04c      	beq.n	8002352 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c0:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d121      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e09e      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e092      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e086      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e07e      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002310:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 0203 	bic.w	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	493f      	ldr	r1, [pc, #252]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7fe fde9 	bl	8000ef8 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002328:	e00a      	b.n	8002340 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7fe fde5 	bl	8000ef8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e066      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 020c 	and.w	r2, r3, #12
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	429a      	cmp	r2, r3
 8002350:	d1eb      	bne.n	800232a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	492c      	ldr	r1, [pc, #176]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1b0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e036      	b.n	800240e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4918      	ldr	r1, [pc, #96]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4910      	ldr	r1, [pc, #64]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023de:	f000 f825 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_ClockConfig+0x1b4>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa21 f303 	lsr.w	r3, r1, r3
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd28 	bl	8000e58 <HAL_InitTick>
 8002408:	4603      	mov	r3, r0
 800240a:	72fb      	strb	r3, [r7, #11]

  return status;
 800240c:	7afb      	ldrb	r3, [r7, #11]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	080038d4 	.word	0x080038d4
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d121      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11e      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e005      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d133      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa4>
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xaa>
 80024ce:	e005      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024d2:	617b      	str	r3, [r7, #20]
      break;
 80024d4:	e005      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d8:	617b      	str	r3, [r7, #20]
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	617b      	str	r3, [r7, #20]
      break;
 80024e0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	3301      	adds	r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	fb02 f203 	mul.w	r2, r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_GetSysClockFreq+0x104>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0e5b      	lsrs	r3, r3, #25
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002522:	69bb      	ldr	r3, [r7, #24]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3724      	adds	r7, #36	; 0x24
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	080038ec 	.word	0x080038ec
 8002538:	00f42400 	.word	0x00f42400
 800253c:	007a1200 	.word	0x007a1200

08002540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCC_GetHCLKFreq+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800255c:	f7ff fff0 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	080038e4 	.word	0x080038e4

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002588:	f7ff ffda 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 800258c:	4601      	mov	r1, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080038e4 	.word	0x080038e4

080025b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025c8:	f7ff fa04 	bl	80019d4 <HAL_PWREx_GetVoltageRange>
 80025cc:	6178      	str	r0, [r7, #20]
 80025ce:	e014      	b.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025da:	6593      	str	r3, [r2, #88]	; 0x58
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025e8:	f7ff f9f4 	bl	80019d4 <HAL_PWREx_GetVoltageRange>
 80025ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d10b      	bne.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d919      	bls.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2ba0      	cmp	r3, #160	; 0xa0
 800260c:	d902      	bls.n	8002614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800260e:	2302      	movs	r3, #2
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e013      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e010      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d902      	bls.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002620:	2303      	movs	r3, #3
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e00a      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d102      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262c:	2302      	movs	r3, #2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e004      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d101      	bne.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 0207 	bic.w	r2, r3, #7
 8002644:	4909      	ldr	r1, [pc, #36]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d001      	beq.n	800265e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	40022000 	.word	0x40022000

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002678:	2300      	movs	r3, #0
 800267a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800267c:	2300      	movs	r3, #0
 800267e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03f      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d01c      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269a:	d802      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026a0:	e01f      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ac:	d01c      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b0:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a84      	ldr	r2, [pc, #528]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026bc:	e015      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fab9 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3320      	adds	r3, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fba0 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	74fb      	strb	r3, [r7, #19]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fe:	4972      	ldr	r1, [pc, #456]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002706:	e001      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d03f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d01c      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002726:	d802      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800272c:	e01f      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	d003      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002738:	d01c      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800273a:	e018      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800273c:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a61      	ldr	r2, [pc, #388]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002748:	e015      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fa73 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800275a:	e00c      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3320      	adds	r3, #32
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fb5a 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	74fb      	strb	r3, [r7, #19]
      break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800277c:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278a:	494f      	ldr	r1, [pc, #316]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002792:	e001      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a0 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3a      	ldr	r2, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fb86 	bl	8000ef8 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ee:	e009      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fb82 	bl	8000ef8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	74fb      	strb	r3, [r7, #19]
        break;
 8002802:	e005      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d15c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01f      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d019      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fb41 	bl	8000ef8 <HAL_GetTick>
 8002876:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	e00b      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fb3d 	bl	8000ef8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d902      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	74fb      	strb	r3, [r7, #19]
            break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ec      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	4904      	ldr	r1, [pc, #16]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028be:	e009      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
 80028c4:	e006      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d4:	7c7b      	ldrb	r3, [r7, #17]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b9e      	ldr	r3, [pc, #632]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a9d      	ldr	r2, [pc, #628]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f2:	4b98      	ldr	r3, [pc, #608]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f023 0203 	bic.w	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	4994      	ldr	r1, [pc, #592]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002914:	4b8f      	ldr	r3, [pc, #572]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f023 020c 	bic.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	498c      	ldr	r1, [pc, #560]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002936:	4b87      	ldr	r3, [pc, #540]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4983      	ldr	r1, [pc, #524]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002958:	4b7e      	ldr	r3, [pc, #504]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	497b      	ldr	r1, [pc, #492]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	4972      	ldr	r1, [pc, #456]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299c:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	496a      	ldr	r1, [pc, #424]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	4961      	ldr	r1, [pc, #388]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	4959      	ldr	r1, [pc, #356]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	4950      	ldr	r1, [pc, #320]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	4948      	ldr	r1, [pc, #288]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	493f      	ldr	r1, [pc, #252]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d028      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	4937      	ldr	r1, [pc, #220]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a92:	60d3      	str	r3, [r2, #12]
 8002a94:	e011      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f8c8 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	491f      	ldr	r1, [pc, #124]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af0:	60d3      	str	r3, [r2, #12]
 8002af2:	e011      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2101      	movs	r1, #1
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f899 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02b      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	4908      	ldr	r1, [pc, #32]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b42:	d109      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a02      	ldr	r2, [pc, #8]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4e:	60d3      	str	r3, [r2, #12]
 8002b50:	e014      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f867 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b96:	4928      	ldr	r1, [pc, #160]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f844 	bl	8002c3c <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
 8002bc2:	e011      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3320      	adds	r3, #32
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f921 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c26:	4904      	ldr	r1, [pc, #16]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000

08002c3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0203 	and.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10d      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
       ||
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d044      	beq.n	8002d0c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	e041      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d00c      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x6e>
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d013      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x80>
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d120      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11d      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca8:	e01a      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cba:	e013      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10f      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd8:	e006      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cde:	e004      	b.n	8002cea <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e002      	b.n	8002cea <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	430b      	orrs	r3, r1
 8002d06:	4944      	ldr	r1, [pc, #272]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d17d      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1e:	f7fe f8eb 	bl	8000ef8 <HAL_GetTick>
 8002d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d24:	e009      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d26:	f7fe f8e7 	bl	8000ef8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	73fb      	strb	r3, [r7, #15]
        break;
 8002d38:	e005      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ef      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d160      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d111      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	0211      	lsls	r1, r2, #8
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68d2      	ldr	r2, [r2, #12]
 8002d68:	0912      	lsrs	r2, r2, #4
 8002d6a:	0452      	lsls	r2, r2, #17
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	492a      	ldr	r1, [pc, #168]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	610b      	str	r3, [r1, #16]
 8002d74:	e027      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d112      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7c:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6912      	ldr	r2, [r2, #16]
 8002d92:	0852      	lsrs	r2, r2, #1
 8002d94:	3a01      	subs	r2, #1
 8002d96:	0552      	lsls	r2, r2, #21
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	610b      	str	r3, [r1, #16]
 8002da0:	e011      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002daa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	0211      	lsls	r1, r2, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6952      	ldr	r2, [r2, #20]
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0652      	lsls	r2, r2, #25
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	4915      	ldr	r1, [pc, #84]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f891 	bl	8000ef8 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dd8:	e009      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dda:	f7fe f88d 	bl	8000ef8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	73fb      	strb	r3, [r7, #15]
          break;
 8002dec:	e005      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ef      	beq.n	8002dda <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d044      	beq.n	8002eec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e041      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d00c      	beq.n	8002e8a <RCCEx_PLLSAI2_Config+0x6e>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d013      	beq.n	8002e9c <RCCEx_PLLSAI2_Config+0x80>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d120      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e78:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11d      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e88:	e01a      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e8a:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9a:	e013      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ea8:	4b48      	ldr	r3, [pc, #288]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eb8:	e006      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebe:	e004      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	4939      	ldr	r1, [pc, #228]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d167      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efe:	f7fd fffb 	bl	8000ef8 <HAL_GetTick>
 8002f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f04:	e009      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f06:	f7fd fff7 	bl	8000ef8 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d902      	bls.n	8002f1a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	73fb      	strb	r3, [r7, #15]
        break;
 8002f18:	e005      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ef      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d14a      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d111      	bne.n	8002f56 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	0211      	lsls	r1, r2, #8
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68d2      	ldr	r2, [r2, #12]
 8002f48:	0912      	lsrs	r2, r2, #4
 8002f4a:	0452      	lsls	r2, r2, #17
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	491f      	ldr	r1, [pc, #124]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	614b      	str	r3, [r1, #20]
 8002f54:	e011      	b.n	8002f7a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	0211      	lsls	r1, r2, #8
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6912      	ldr	r2, [r2, #16]
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0652      	lsls	r2, r2, #25
 8002f72:	430a      	orrs	r2, r1
 8002f74:	4915      	ldr	r1, [pc, #84]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fd ffb7 	bl	8000ef8 <HAL_GetTick>
 8002f8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f8c:	e009      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f8e:	f7fd ffb3 	bl	8000ef8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d902      	bls.n	8002fa2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa0:	e005      	b.n	8002fae <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ef      	beq.n	8002f8e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fe40 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f82c 	bl	800306c <UART_SetConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 faaa 	bl	8003580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fb31 	bl	80036c4 <UART_CheckIdleState>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003070:	b088      	sub	sp, #32
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4313      	orrs	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4bac      	ldr	r3, [pc, #688]	; (800334c <UART_SetConfig+0x2e0>)
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4aa2      	ldr	r2, [pc, #648]	; (8003350 <UART_SetConfig+0x2e4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a99      	ldr	r2, [pc, #612]	; (8003354 <UART_SetConfig+0x2e8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d121      	bne.n	8003138 <UART_SetConfig+0xcc>
 80030f4:	4b98      	ldr	r3, [pc, #608]	; (8003358 <UART_SetConfig+0x2ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d816      	bhi.n	8003130 <UART_SetConfig+0xc4>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x9c>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	08003125 	.word	0x08003125
 8003110:	0800311f 	.word	0x0800311f
 8003114:	0800312b 	.word	0x0800312b
 8003118:	2301      	movs	r3, #1
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e0e8      	b.n	80032f0 <UART_SetConfig+0x284>
 800311e:	2302      	movs	r3, #2
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e0e5      	b.n	80032f0 <UART_SetConfig+0x284>
 8003124:	2304      	movs	r3, #4
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e0e2      	b.n	80032f0 <UART_SetConfig+0x284>
 800312a:	2308      	movs	r3, #8
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e0df      	b.n	80032f0 <UART_SetConfig+0x284>
 8003130:	2310      	movs	r3, #16
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	bf00      	nop
 8003136:	e0db      	b.n	80032f0 <UART_SetConfig+0x284>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a87      	ldr	r2, [pc, #540]	; (800335c <UART_SetConfig+0x2f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d134      	bne.n	80031ac <UART_SetConfig+0x140>
 8003142:	4b85      	ldr	r3, [pc, #532]	; (8003358 <UART_SetConfig+0x2ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d829      	bhi.n	80031a4 <UART_SetConfig+0x138>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0xec>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800318d 	.word	0x0800318d
 800315c:	080031a5 	.word	0x080031a5
 8003160:	080031a5 	.word	0x080031a5
 8003164:	080031a5 	.word	0x080031a5
 8003168:	08003199 	.word	0x08003199
 800316c:	080031a5 	.word	0x080031a5
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031a5 	.word	0x080031a5
 8003178:	08003193 	.word	0x08003193
 800317c:	080031a5 	.word	0x080031a5
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031a5 	.word	0x080031a5
 8003188:	0800319f 	.word	0x0800319f
 800318c:	2300      	movs	r3, #0
 800318e:	76fb      	strb	r3, [r7, #27]
 8003190:	e0ae      	b.n	80032f0 <UART_SetConfig+0x284>
 8003192:	2302      	movs	r3, #2
 8003194:	76fb      	strb	r3, [r7, #27]
 8003196:	e0ab      	b.n	80032f0 <UART_SetConfig+0x284>
 8003198:	2304      	movs	r3, #4
 800319a:	76fb      	strb	r3, [r7, #27]
 800319c:	e0a8      	b.n	80032f0 <UART_SetConfig+0x284>
 800319e:	2308      	movs	r3, #8
 80031a0:	76fb      	strb	r3, [r7, #27]
 80031a2:	e0a5      	b.n	80032f0 <UART_SetConfig+0x284>
 80031a4:	2310      	movs	r3, #16
 80031a6:	76fb      	strb	r3, [r7, #27]
 80031a8:	bf00      	nop
 80031aa:	e0a1      	b.n	80032f0 <UART_SetConfig+0x284>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	; (8003360 <UART_SetConfig+0x2f4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d120      	bne.n	80031f8 <UART_SetConfig+0x18c>
 80031b6:	4b68      	ldr	r3, [pc, #416]	; (8003358 <UART_SetConfig+0x2ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d00f      	beq.n	80031e4 <UART_SetConfig+0x178>
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d802      	bhi.n	80031ce <UART_SetConfig+0x162>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <UART_SetConfig+0x16c>
 80031cc:	e010      	b.n	80031f0 <UART_SetConfig+0x184>
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d005      	beq.n	80031de <UART_SetConfig+0x172>
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d009      	beq.n	80031ea <UART_SetConfig+0x17e>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x184>
 80031d8:	2300      	movs	r3, #0
 80031da:	76fb      	strb	r3, [r7, #27]
 80031dc:	e088      	b.n	80032f0 <UART_SetConfig+0x284>
 80031de:	2302      	movs	r3, #2
 80031e0:	76fb      	strb	r3, [r7, #27]
 80031e2:	e085      	b.n	80032f0 <UART_SetConfig+0x284>
 80031e4:	2304      	movs	r3, #4
 80031e6:	76fb      	strb	r3, [r7, #27]
 80031e8:	e082      	b.n	80032f0 <UART_SetConfig+0x284>
 80031ea:	2308      	movs	r3, #8
 80031ec:	76fb      	strb	r3, [r7, #27]
 80031ee:	e07f      	b.n	80032f0 <UART_SetConfig+0x284>
 80031f0:	2310      	movs	r3, #16
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	bf00      	nop
 80031f6:	e07b      	b.n	80032f0 <UART_SetConfig+0x284>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a59      	ldr	r2, [pc, #356]	; (8003364 <UART_SetConfig+0x2f8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d120      	bne.n	8003244 <UART_SetConfig+0x1d8>
 8003202:	4b55      	ldr	r3, [pc, #340]	; (8003358 <UART_SetConfig+0x2ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	d00f      	beq.n	8003230 <UART_SetConfig+0x1c4>
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d802      	bhi.n	800321a <UART_SetConfig+0x1ae>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0x1b8>
 8003218:	e010      	b.n	800323c <UART_SetConfig+0x1d0>
 800321a:	2b80      	cmp	r3, #128	; 0x80
 800321c:	d005      	beq.n	800322a <UART_SetConfig+0x1be>
 800321e:	2bc0      	cmp	r3, #192	; 0xc0
 8003220:	d009      	beq.n	8003236 <UART_SetConfig+0x1ca>
 8003222:	e00b      	b.n	800323c <UART_SetConfig+0x1d0>
 8003224:	2300      	movs	r3, #0
 8003226:	76fb      	strb	r3, [r7, #27]
 8003228:	e062      	b.n	80032f0 <UART_SetConfig+0x284>
 800322a:	2302      	movs	r3, #2
 800322c:	76fb      	strb	r3, [r7, #27]
 800322e:	e05f      	b.n	80032f0 <UART_SetConfig+0x284>
 8003230:	2304      	movs	r3, #4
 8003232:	76fb      	strb	r3, [r7, #27]
 8003234:	e05c      	b.n	80032f0 <UART_SetConfig+0x284>
 8003236:	2308      	movs	r3, #8
 8003238:	76fb      	strb	r3, [r7, #27]
 800323a:	e059      	b.n	80032f0 <UART_SetConfig+0x284>
 800323c:	2310      	movs	r3, #16
 800323e:	76fb      	strb	r3, [r7, #27]
 8003240:	bf00      	nop
 8003242:	e055      	b.n	80032f0 <UART_SetConfig+0x284>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a47      	ldr	r2, [pc, #284]	; (8003368 <UART_SetConfig+0x2fc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d124      	bne.n	8003298 <UART_SetConfig+0x22c>
 800324e:	4b42      	ldr	r3, [pc, #264]	; (8003358 <UART_SetConfig+0x2ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d012      	beq.n	8003284 <UART_SetConfig+0x218>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d802      	bhi.n	800326a <UART_SetConfig+0x1fe>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <UART_SetConfig+0x20c>
 8003268:	e012      	b.n	8003290 <UART_SetConfig+0x224>
 800326a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326e:	d006      	beq.n	800327e <UART_SetConfig+0x212>
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d009      	beq.n	800328a <UART_SetConfig+0x21e>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x224>
 8003278:	2300      	movs	r3, #0
 800327a:	76fb      	strb	r3, [r7, #27]
 800327c:	e038      	b.n	80032f0 <UART_SetConfig+0x284>
 800327e:	2302      	movs	r3, #2
 8003280:	76fb      	strb	r3, [r7, #27]
 8003282:	e035      	b.n	80032f0 <UART_SetConfig+0x284>
 8003284:	2304      	movs	r3, #4
 8003286:	76fb      	strb	r3, [r7, #27]
 8003288:	e032      	b.n	80032f0 <UART_SetConfig+0x284>
 800328a:	2308      	movs	r3, #8
 800328c:	76fb      	strb	r3, [r7, #27]
 800328e:	e02f      	b.n	80032f0 <UART_SetConfig+0x284>
 8003290:	2310      	movs	r3, #16
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	bf00      	nop
 8003296:	e02b      	b.n	80032f0 <UART_SetConfig+0x284>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <UART_SetConfig+0x2e4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d124      	bne.n	80032ec <UART_SetConfig+0x280>
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <UART_SetConfig+0x2ec>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b0:	d012      	beq.n	80032d8 <UART_SetConfig+0x26c>
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d802      	bhi.n	80032be <UART_SetConfig+0x252>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <UART_SetConfig+0x260>
 80032bc:	e012      	b.n	80032e4 <UART_SetConfig+0x278>
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c2:	d006      	beq.n	80032d2 <UART_SetConfig+0x266>
 80032c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c8:	d009      	beq.n	80032de <UART_SetConfig+0x272>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x278>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e00e      	b.n	80032f0 <UART_SetConfig+0x284>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e00b      	b.n	80032f0 <UART_SetConfig+0x284>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e008      	b.n	80032f0 <UART_SetConfig+0x284>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e005      	b.n	80032f0 <UART_SetConfig+0x284>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	bf00      	nop
 80032ea:	e001      	b.n	80032f0 <UART_SetConfig+0x284>
 80032ec:	2310      	movs	r3, #16
 80032ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <UART_SetConfig+0x2e4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f040 8087 	bne.w	800340a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032fc:	7efb      	ldrb	r3, [r7, #27]
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d836      	bhi.n	8003370 <UART_SetConfig+0x304>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0x29c>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003371 	.word	0x08003371
 8003310:	08003335 	.word	0x08003335
 8003314:	08003371 	.word	0x08003371
 8003318:	0800333b 	.word	0x0800333b
 800331c:	08003371 	.word	0x08003371
 8003320:	08003371 	.word	0x08003371
 8003324:	08003371 	.word	0x08003371
 8003328:	08003343 	.word	0x08003343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800332c:	f7ff f914 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8003330:	6178      	str	r0, [r7, #20]
        break;
 8003332:	e022      	b.n	800337a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <UART_SetConfig+0x300>)
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e01f      	b.n	800337a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333a:	f7ff f877 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800333e:	6178      	str	r0, [r7, #20]
        break;
 8003340:	e01b      	b.n	800337a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003346:	617b      	str	r3, [r7, #20]
        break;
 8003348:	e017      	b.n	800337a <UART_SetConfig+0x30e>
 800334a:	bf00      	nop
 800334c:	efff69f3 	.word	0xefff69f3
 8003350:	40008000 	.word	0x40008000
 8003354:	40013800 	.word	0x40013800
 8003358:	40021000 	.word	0x40021000
 800335c:	40004400 	.word	0x40004400
 8003360:	40004800 	.word	0x40004800
 8003364:	40004c00 	.word	0x40004c00
 8003368:	40005000 	.word	0x40005000
 800336c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	76bb      	strb	r3, [r7, #26]
        break;
 8003378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80f1 	beq.w	8003564 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	429a      	cmp	r2, r3
 8003390:	d305      	bcc.n	800339e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	429a      	cmp	r2, r3
 800339c:	d902      	bls.n	80033a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	76bb      	strb	r3, [r7, #26]
 80033a2:	e0df      	b.n	8003564 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	4619      	mov	r1, r3
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f04f 0400 	mov.w	r4, #0
 80033b4:	0214      	lsls	r4, r2, #8
 80033b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033ba:	020b      	lsls	r3, r1, #8
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6852      	ldr	r2, [r2, #4]
 80033c0:	0852      	lsrs	r2, r2, #1
 80033c2:	4611      	mov	r1, r2
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	eb13 0b01 	adds.w	fp, r3, r1
 80033cc:	eb44 0c02 	adc.w	ip, r4, r2
 80033d0:	4658      	mov	r0, fp
 80033d2:	4661      	mov	r1, ip
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	f7fc fefa 	bl	80001d8 <__aeabi_uldivmod>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f0:	d308      	bcc.n	8003404 <UART_SetConfig+0x398>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f8:	d204      	bcs.n	8003404 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e0af      	b.n	8003564 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	76bb      	strb	r3, [r7, #26]
 8003408:	e0ac      	b.n	8003564 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003412:	d15b      	bne.n	80034cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003414:	7efb      	ldrb	r3, [r7, #27]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d827      	bhi.n	800346a <UART_SetConfig+0x3fe>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x3b4>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003445 	.word	0x08003445
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003455 	.word	0x08003455
 800342c:	0800346b 	.word	0x0800346b
 8003430:	0800345b 	.word	0x0800345b
 8003434:	0800346b 	.word	0x0800346b
 8003438:	0800346b 	.word	0x0800346b
 800343c:	0800346b 	.word	0x0800346b
 8003440:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7ff f888 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8003448:	6178      	str	r0, [r7, #20]
        break;
 800344a:	e013      	b.n	8003474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800344c:	f7ff f89a 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003450:	6178      	str	r0, [r7, #20]
        break;
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <UART_SetConfig+0x510>)
 8003456:	617b      	str	r3, [r7, #20]
        break;
 8003458:	e00c      	b.n	8003474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7fe ffe7 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800345e:	6178      	str	r0, [r7, #20]
        break;
 8003460:	e008      	b.n	8003474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	617b      	str	r3, [r7, #20]
        break;
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	76bb      	strb	r3, [r7, #26]
        break;
 8003472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d074      	beq.n	8003564 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005a      	lsls	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d916      	bls.n	80034c6 <UART_SetConfig+0x45a>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d212      	bcs.n	80034c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f023 030f 	bic.w	r3, r3, #15
 80034a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	89fb      	ldrh	r3, [r7, #14]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	89fa      	ldrh	r2, [r7, #14]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	e04e      	b.n	8003564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	76bb      	strb	r3, [r7, #26]
 80034ca:	e04b      	b.n	8003564 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034cc:	7efb      	ldrb	r3, [r7, #27]
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d827      	bhi.n	8003522 <UART_SetConfig+0x4b6>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x46c>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003505 	.word	0x08003505
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	08003523 	.word	0x08003523
 80034e8:	08003513 	.word	0x08003513
 80034ec:	08003523 	.word	0x08003523
 80034f0:	08003523 	.word	0x08003523
 80034f4:	08003523 	.word	0x08003523
 80034f8:	0800351b 	.word	0x0800351b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7ff f82c 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8003500:	6178      	str	r0, [r7, #20]
        break;
 8003502:	e013      	b.n	800352c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7ff f83e 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003508:	6178      	str	r0, [r7, #20]
        break;
 800350a:	e00f      	b.n	800352c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <UART_SetConfig+0x510>)
 800350e:	617b      	str	r3, [r7, #20]
        break;
 8003510:	e00c      	b.n	800352c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003512:	f7fe ff8b 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003516:	6178      	str	r0, [r7, #20]
        break;
 8003518:	e008      	b.n	800352c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351e:	617b      	str	r3, [r7, #20]
        break;
 8003520:	e004      	b.n	800352c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	76bb      	strb	r3, [r7, #26]
        break;
 800352a:	bf00      	nop
    }

    if (pclk != 0U)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085a      	lsrs	r2, r3, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	441a      	add	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	b29b      	uxth	r3, r3
 8003546:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d908      	bls.n	8003560 <UART_SetConfig+0x4f4>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d204      	bcs.n	8003560 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e001      	b.n	8003564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003570:	7ebb      	ldrb	r3, [r7, #26]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800357c:	00f42400 	.word	0x00f42400

08003580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01a      	beq.n	8003696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367e:	d10a      	bne.n	8003696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036d2:	f7fd fc11 	bl	8000ef8 <HAL_GetTick>
 80036d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d10e      	bne.n	8003704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f82a 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e020      	b.n	8003746 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d10e      	bne.n	8003730 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f814 	bl	800374e <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e00a      	b.n	8003746 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	e05d      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d059      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003768:	f7fd fbc6 	bl	8000ef8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <UART_WaitOnFlagUntilTimeout+0x30>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11b      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800378c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e042      	b.n	800383c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02b      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d2:	d123      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e00f      	b.n	800383c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	429a      	cmp	r2, r3
 8003838:	d092      	beq.n	8003760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <__libc_init_array>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4e0d      	ldr	r6, [pc, #52]	; (800387c <__libc_init_array+0x38>)
 8003848:	4c0d      	ldr	r4, [pc, #52]	; (8003880 <__libc_init_array+0x3c>)
 800384a:	1ba4      	subs	r4, r4, r6
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	2500      	movs	r5, #0
 8003850:	42a5      	cmp	r5, r4
 8003852:	d109      	bne.n	8003868 <__libc_init_array+0x24>
 8003854:	4e0b      	ldr	r6, [pc, #44]	; (8003884 <__libc_init_array+0x40>)
 8003856:	4c0c      	ldr	r4, [pc, #48]	; (8003888 <__libc_init_array+0x44>)
 8003858:	f000 f828 	bl	80038ac <_init>
 800385c:	1ba4      	subs	r4, r4, r6
 800385e:	10a4      	asrs	r4, r4, #2
 8003860:	2500      	movs	r5, #0
 8003862:	42a5      	cmp	r5, r4
 8003864:	d105      	bne.n	8003872 <__libc_init_array+0x2e>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800386c:	4798      	blx	r3
 800386e:	3501      	adds	r5, #1
 8003870:	e7ee      	b.n	8003850 <__libc_init_array+0xc>
 8003872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003876:	4798      	blx	r3
 8003878:	3501      	adds	r5, #1
 800387a:	e7f2      	b.n	8003862 <__libc_init_array+0x1e>
 800387c:	08003924 	.word	0x08003924
 8003880:	08003924 	.word	0x08003924
 8003884:	08003924 	.word	0x08003924
 8003888:	08003928 	.word	0x08003928

0800388c <memset>:
 800388c:	4402      	add	r2, r0
 800388e:	4603      	mov	r3, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	f803 1b01 	strb.w	r1, [r3], #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <strcpy>:
 800389c:	4603      	mov	r3, r0
 800389e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038a2:	f803 2b01 	strb.w	r2, [r3], #1
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d1f9      	bne.n	800389e <strcpy+0x2>
 80038aa:	4770      	bx	lr

080038ac <_init>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr

080038b8 <_fini>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr
