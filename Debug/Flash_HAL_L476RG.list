
Flash_HAL_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003518  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f0  080036f0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080036f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000030  08003724  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003724  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7a5  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a13  00000000  00000000  0002a801  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002c218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009759  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008052  00000000  00000000  00036bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e83a2  00000000  00000000  0003ec0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002628  00000000  00000000  00127028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003688 	.word	0x08003688

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08003688 	.word	0x08003688

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <save_to_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void save_to_flash(uint8_t *data)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	466b      	mov	r3, sp
 80004e2:	461d      	mov	r5, r3
	volatile uint64_t data_to_FLASH[(strlen((char*)data)/8)	+ (int)((strlen((char*)data) % 8) != 0)];
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff fe6f 	bl	80001c8 <strlen>
 80004ea:	4603      	mov	r3, r0
 80004ec:	08dc      	lsrs	r4, r3, #3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f7ff fe6a 	bl	80001c8 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f003 0307 	and.w	r3, r3, #7
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	bf14      	ite	ne
 80004fe:	2301      	movne	r3, #1
 8000500:	2300      	moveq	r3, #0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	18e0      	adds	r0, r4, r3
 8000506:	4603      	mov	r3, r0
 8000508:	3b01      	subs	r3, #1
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
 800050c:	4601      	mov	r1, r0
 800050e:	f04f 0200 	mov.w	r2, #0
 8000512:	f04f 0300 	mov.w	r3, #0
 8000516:	f04f 0400 	mov.w	r4, #0
 800051a:	0194      	lsls	r4, r2, #6
 800051c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000520:	018b      	lsls	r3, r1, #6
 8000522:	4601      	mov	r1, r0
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	f04f 0400 	mov.w	r4, #0
 8000530:	0194      	lsls	r4, r2, #6
 8000532:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000536:	018b      	lsls	r3, r1, #6
 8000538:	00c3      	lsls	r3, r0, #3
 800053a:	3307      	adds	r3, #7
 800053c:	3307      	adds	r3, #7
 800053e:	08db      	lsrs	r3, r3, #3
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	ebad 0d03 	sub.w	sp, sp, r3
 8000546:	466b      	mov	r3, sp
 8000548:	3307      	adds	r3, #7
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8000550:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe37 	bl	80001c8 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	4620      	mov	r0, r4
 8000562:	f003 f881 	bl	8003668 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8000566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f884 	bl	8003678 <strcpy>
	volatile uint64_t data_length = (strlen((char*)data_to_FLASH)/ 8) + (int)((strlen((char*)data_to_FLASH) % 8) != 0);
 8000570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe28 	bl	80001c8 <strlen>
 8000578:	4603      	mov	r3, r0
 800057a:	08dc      	lsrs	r4, r3, #3
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe22 	bl	80001c8 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4423      	add	r3, r4
 8000596:	f04f 0400 	mov.w	r4, #0
 800059a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	pages = (strlen((char*)data)/page_size) + (int)((strlen((char*)data) % page_size) != 0);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff fe12 	bl	80001c8 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	0adb      	lsrs	r3, r3, #11
 80005a8:	b29c      	uxth	r4, r3
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff fe0c 	bl	80001c8 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4423      	add	r3, r4
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <save_to_flash+0x190>)
 80005c8:	801a      	strh	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80005ca:	f000 fce1 	bl	8000f90 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 80005ce:	f000 fd11 	bl	8000ff4 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.Page = 0x1FF;
 80005d6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80005da:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
	  EraseInitStruct.NbPages = pages;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <save_to_flash+0x190>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80005f0:	f107 0214 	add.w	r2, r7, #20
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fdd4 	bl	80011a8 <HAL_FLASHEx_Erase>
 8000600:	4603      	mov	r3, r0
 8000602:	72fb      	strb	r3, [r7, #11]
	  while(index <= data_length)
 8000604:	e01d      	b.n	8000642 <save_to_flash+0x16a>
	  {
		  if (status == HAL_OK)
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d119      	bne.n	8000642 <save_to_flash+0x16a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]); //_WORD  _FAST ( No interrupt)
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	4916      	ldr	r1, [pc, #88]	; (800066c <save_to_flash+0x194>)
 8000612:	4419      	add	r1, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000620:	461a      	mov	r2, r3
 8000622:	4623      	mov	r3, r4
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fc47 	bl	8000eb8 <HAL_FLASH_Program>
 800062a:	4603      	mov	r3, r0
 800062c:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d105      	bne.n	8000642 <save_to_flash+0x16a>
			  {
				  write_cnt += 8;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3308      	adds	r3, #8
 800063a:	613b      	str	r3, [r7, #16]
				  index++;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
	  while(index <= data_length)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f04f 0400 	mov.w	r4, #0
 8000648:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800064c:	42a2      	cmp	r2, r4
 800064e:	bf08      	it	eq
 8000650:	4299      	cmpeq	r1, r3
 8000652:	d2d8      	bcs.n	8000606 <save_to_flash+0x12e>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8000654:	f000 fcea 	bl	800102c <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8000658:	f000 fcbc 	bl	8000fd4 <HAL_FLASH_Lock>
 800065c:	46ad      	mov	sp, r5
}
 800065e:	bf00      	nop
 8000660:	3738      	adds	r7, #56	; 0x38
 8000662:	46bd      	mov	sp, r7
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	bf00      	nop
 8000668:	200000e0 	.word	0x200000e0
 800066c:	080ff800 	.word	0x080ff800

08000670 <read_flash>:

void read_flash(uint8_t* data)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <read_flash+0x74>)
 8000680:	4413      	add	r3, r2
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d020      	beq.n	80006d0 <read_flash+0x60>
		{
			data[read_cnt] = (uint8_t)read_data;
 800068e:	68f9      	ldr	r1, [r7, #12]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	0a19      	lsrs	r1, r3, #8
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	3301      	adds	r3, #1
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	0c19      	lsrs	r1, r3, #16
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	3302      	adds	r3, #2
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	b2ca      	uxtb	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	0e19      	lsrs	r1, r3, #24
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	3303      	adds	r3, #3
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	b2ca      	uxtb	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3304      	adds	r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d6:	d1d1      	bne.n	800067c <read_flash+0xc>
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	080ff800 	.word	0x080ff800

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09a      	sub	sp, #104	; 0x68
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fa81 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f879 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f919 	bl	800092c <MX_GPIO_Init>
  //UART2_Init();
  MX_USART2_UART_Init();
 80006fa:	f000 f8e7 	bl	80008cc <MX_USART2_UART_Init>
  read_flash((uint8_t*)read_data);
  */

  //Ecriture

  float SOC1=12.560;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0xe8>)
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  float VOL1=23.45;
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0xec>)
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  float CUR1=8.9;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <main+0xf0>)
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28

  float SOC2=18.960;
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <main+0xf4>)
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  float VOL2=24.001;
 800070e:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <main+0xf8>)
 8000710:	623b      	str	r3, [r7, #32]
  float CUR2=5.3;
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <main+0xfc>)
 8000714:	61fb      	str	r3, [r7, #28]

  float * SOC1_p=&SOC1;
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	667b      	str	r3, [r7, #100]	; 0x64
  float * VOL1_p=&VOL1;
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  float * CUR1_p=&CUR1;
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  save_to_flash((uint8_t*) SOC1_p);
 8000728:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800072a:	f7ff fed5 	bl	80004d8 <save_to_flash>
  save_to_flash((uint8_t*) VOL1_p);
 800072e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000730:	f7ff fed2 	bl	80004d8 <save_to_flash>
  save_to_flash((uint8_t*) CUR1_p);
 8000734:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000736:	f7ff fecf 	bl	80004d8 <save_to_flash>

  float * SOC2_p=&SOC2;
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	65bb      	str	r3, [r7, #88]	; 0x58
  float * VOL2_p=&VOL2;
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  float * CUR2_p=&CUR2;
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	653b      	str	r3, [r7, #80]	; 0x50
  save_to_flash((uint8_t*) SOC2_p);
 800074c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800074e:	f7ff fec3 	bl	80004d8 <save_to_flash>
  save_to_flash((uint8_t*) VOL2_p);
 8000752:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000754:	f7ff fec0 	bl	80004d8 <save_to_flash>
  save_to_flash((uint8_t*) CUR2_p);
 8000758:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800075a:	f7ff febd 	bl	80004d8 <save_to_flash>

 //Lecture
  float r_SOC1=0.0f;
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  float r_VOL1=0.0f;
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  float r_CUR1=0.0f;
 800076a:	f04f 0300 	mov.w	r3, #0
 800076e:	613b      	str	r3, [r7, #16]

  float r_SOC2=0.0f;
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  float r_VOL2=0.0f;
 8000776:	f04f 0300 	mov.w	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  float r_CUR2=0.0f;
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	607b      	str	r3, [r7, #4]

  float * r_SOC1_p=&r_SOC1;
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  float * r_VOL1_p=&r_VOL1;
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  float * r_CUR1_p=&r_CUR1;
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  read_flash((uint8_t*)r_SOC1_p);
 8000794:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000796:	f7ff ff6b 	bl	8000670 <read_flash>
  read_flash((uint8_t*)r_VOL1_p);
 800079a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800079c:	f7ff ff68 	bl	8000670 <read_flash>
  read_flash((uint8_t*)r_CUR1_p);
 80007a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80007a2:	f7ff ff65 	bl	8000670 <read_flash>

  float * r_SOC2_p=&r_SOC2;
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  float * r_VOL2_p=&r_VOL2;
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  float * r_CUR2_p=&r_CUR2;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  read_flash((uint8_t*)r_SOC2_p);
 80007b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007b8:	f7ff ff5a 	bl	8000670 <read_flash>
  read_flash((uint8_t*)r_VOL2_p);
 80007bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80007be:	f7ff ff57 	bl	8000670 <read_flash>
  read_flash((uint8_t*)r_CUR2_p);
 80007c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80007c4:	f7ff ff54 	bl	8000670 <read_flash>

  int i=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0xe4>
 80007ce:	bf00      	nop
 80007d0:	4148f5c3 	.word	0x4148f5c3
 80007d4:	41bb999a 	.word	0x41bb999a
 80007d8:	410e6666 	.word	0x410e6666
 80007dc:	4197ae14 	.word	0x4197ae14
 80007e0:	41c0020c 	.word	0x41c0020c
 80007e4:	40a9999a 	.word	0x40a9999a

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0b8      	sub	sp, #224	; 0xe0
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ff36 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2288      	movs	r2, #136	; 0x88
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ff28 	bl	8003668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	2303      	movs	r3, #3
 800082e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000838:	2309      	movs	r3, #9
 800083a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083e:	2307      	movs	r3, #7
 8000840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f80f 	bl	8001878 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000860:	f000 f8cc 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000882:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fbdb 	bl	8002044 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000894:	f000 f8b2 	bl	80009fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000898:	2302      	movs	r3, #2
 800089a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fdd2 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ae:	f000 f8a5 	bl	80009fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b6:	f000 ff89 	bl	80017cc <HAL_PWREx_ControlVoltageScaling>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008c0:	f000 f89c 	bl	80009fc <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	37e0      	adds	r7, #224	; 0xe0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART2_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000910:	f002 fa4c 	bl	8002dac <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f86f 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000060 	.word	0x20000060
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_GPIO_Init+0xc4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_GPIO_Init+0xc4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fee9 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_GPIO_Init+0xc8>)
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_GPIO_Init+0xcc>)
 80009c4:	f000 fd34 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c8:	2320      	movs	r3, #32
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fd25 	bl	8001430 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	10210000 	.word	0x10210000
 80009f8:	48000800 	.word	0x48000800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d128      	bne.n	8000ac8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fcb4 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f8be 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SystemInit+0x64>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <SystemInit+0x64>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <SystemInit+0x68>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <SystemInit+0x68>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x68>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <SystemInit+0x68>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <SystemInit+0x68>)
 8000b60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <SystemInit+0x68>)
 8000b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SystemInit+0x68>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <SystemInit+0x68>)
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <SystemInit+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SystemInit+0x64>)
 8000b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffc6 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ba8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
	ldr	r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LoopForever+0x16>)
	cmp	r2, r3
 8000bca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 fd27 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fd89 	bl	80006e8 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bdc:	080036f8 	.word	0x080036f8
	ldr	r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000be4:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8000be8:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8000bec:	200000e8 	.word	0x200000e8

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_Init+0x3c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x3c>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f920 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f80f 	bl	8000c34 <HAL_InitTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	e001      	b.n	8000c26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c22:	f7ff fef3 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_InitTick+0x6c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d023      	beq.n	8000c90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_InitTick+0x70>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f91d 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d809      	bhi.n	8000c84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f8f5 	bl	8000e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0x74>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e001      	b.n	8000c94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	200000e4 	.word	0x200000e4

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200000e4 	.word	0x200000e4

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff47 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff5c 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffb0 	bl	8000e0c <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_FLASH_Program+0x1e>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e053      	b.n	8000f7e <HAL_FLASH_Program+0xc6>
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000edc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ee0:	f000 f8b4 	bl	800104c <FLASH_WaitForLastOperation>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d143      	bne.n	8000f76 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_FLASH_Program+0xd4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d009      	beq.n	8000f14 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <HAL_FLASH_Program+0xd4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_FLASH_Program+0xd4>)
 8000f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	771a      	strb	r2, [r3, #28]
 8000f12:	e002      	b.n	8000f1a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f000 f8e7 	bl	80010f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e010      	b.n	8000f52 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <HAL_FLASH_Program+0x84>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d10a      	bne.n	8000f52 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f000 f8fd 	bl	8001140 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d102      	bne.n	8000f52 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f50:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f56:	f000 f879 	bl	800104c <FLASH_WaitForLastOperation>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_FLASH_Program+0xd4>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <HAL_FLASH_Program+0xd4>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000f72:	f000 fa19 	bl	80013a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <HAL_FLASH_Program+0xd0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]

  return status;
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_FLASH_Unlock+0x38>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da0b      	bge.n	8000fba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_FLASH_Unlock+0x38>)
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_FLASH_Unlock+0x3c>)
 8000fa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_FLASH_Unlock+0x38>)
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_FLASH_Unlock+0x40>)
 8000fac:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_FLASH_Unlock+0x38>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da01      	bge.n	8000fba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40022000 	.word	0x40022000
 8000fcc:	45670123 	.word	0x45670123
 8000fd0:	cdef89ab 	.word	0xcdef89ab

08000fd4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_FLASH_Lock+0x1c>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_FLASH_Lock+0x1c>)
 8000fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_FLASH_OB_Unlock+0x2c>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_FLASH_OB_Unlock+0x2c>)
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_FLASH_OB_Unlock+0x30>)
 8001008:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_FLASH_OB_Unlock+0x2c>)
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_FLASH_OB_Unlock+0x34>)
 800100e:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	e000      	b.n	8001016 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40022000 	.word	0x40022000
 8001024:	08192a3b 	.word	0x08192a3b
 8001028:	4c5d6e7f 	.word	0x4c5d6e7f

0800102c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_FLASH_OB_Lock+0x1c>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_FLASH_OB_Lock+0x1c>)
 8001036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800103a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40022000 	.word	0x40022000

0800104c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff fe3e 	bl	8000cd4 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800105a:	e00d      	b.n	8001078 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001062:	d009      	beq.n	8001078 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001064:	f7ff fe36 	bl	8000cd4 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d801      	bhi.n	8001078 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e037      	b.n	80010e8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1eb      	bne.n	800105c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01e      	beq.n	80010d4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <FLASH_WaitForLastOperation+0xa8>)
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <FLASH_WaitForLastOperation+0xa8>)
 80010a0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <FLASH_WaitForLastOperation+0x70>
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 80010ae:	699a      	ldr	r2, [r3, #24]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	618b      	str	r3, [r1, #24]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <FLASH_WaitForLastOperation+0x84>
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80010ce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e009      	b.n	80010e8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <FLASH_WaitForLastOperation+0xa4>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40022000 	.word	0x40022000
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010f8:	b490      	push	{r4, r7}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <FLASH_Program_DoubleWord+0x44>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a0c      	ldr	r2, [pc, #48]	; (800113c <FLASH_Program_DoubleWord+0x44>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001116:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800111a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	f04f 0400 	mov.w	r4, #0
 8001126:	0013      	movs	r3, r2
 8001128:	2400      	movs	r4, #0
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	3204      	adds	r2, #4
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bc90      	pop	{r4, r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800114a:	2340      	movs	r3, #64	; 0x40
 800114c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <FLASH_Program_Fast+0x64>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <FLASH_Program_Fast+0x64>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001160:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001162:	f3ef 8310 	mrs	r3, PRIMASK
 8001166:	60fb      	str	r3, [r7, #12]
  return(result);
 8001168:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800116a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3304      	adds	r3, #4
 800117a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3304      	adds	r3, #4
 8001180:	617b      	str	r3, [r7, #20]
    row_index--;
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	3b01      	subs	r3, #1
 8001186:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ef      	bne.n	800116e <FLASH_Program_Fast+0x2e>
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001198:	bf00      	nop
 800119a:	3724      	adds	r7, #36	; 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011b2:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_FLASHEx_Erase+0x16>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e08d      	b.n	80012da <HAL_FLASHEx_Erase+0x132>
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011c8:	f7ff ff40 	bl	800104c <FLASH_WaitForLastOperation>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d17d      	bne.n	80012d2 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011d6:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a3e      	ldr	r2, [pc, #248]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 80011ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 8001206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 800120e:	2203      	movs	r2, #3
 8001210:	771a      	strb	r2, [r3, #28]
 8001212:	e016      	b.n	8001242 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 8001216:	2201      	movs	r2, #1
 8001218:	771a      	strb	r2, [r3, #28]
 800121a:	e012      	b.n	8001242 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d009      	beq.n	800123c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 800122e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 8001236:	2202      	movs	r2, #2
 8001238:	771a      	strb	r2, [r3, #28]
 800123a:	e002      	b.n	8001242 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d113      	bne.n	8001272 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f84c 	bl	80012ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001258:	f7ff fef8 	bl	800104c <FLASH_WaitForLastOperation>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 8001266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	6153      	str	r3, [r2, #20]
 8001270:	e02d      	b.n	80012ce <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	e01d      	b.n	80012be <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4619      	mov	r1, r3
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f000 f857 	bl	800133c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800128e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001292:	f7ff fedb 	bl	800104c <FLASH_WaitForLastOperation>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_FLASHEx_Erase+0x140>)
 80012a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012a4:	f023 0302 	bic.w	r3, r3, #2
 80012a8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
          break;
 80012b6:	e00a      	b.n	80012ce <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3d9      	bcc.n	8001282 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80012ce:	f000 f86b 	bl	80013a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_FLASHEx_Erase+0x13c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

  return status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	40022000 	.word	0x40022000

080012ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <FLASH_MassErase+0x4c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <FLASH_MassErase+0x4c>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <FLASH_MassErase+0x4c>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <FLASH_MassErase+0x4c>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <FLASH_MassErase+0x4c>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <FLASH_MassErase+0x4c>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	6153      	str	r3, [r2, #20]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40022000 	.word	0x40022000

0800133c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <FLASH_PageErase+0x68>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <FLASH_PageErase+0x68>)
 8001356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800135a:	6153      	str	r3, [r2, #20]
 800135c:	e005      	b.n	800136a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <FLASH_PageErase+0x68>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <FLASH_PageErase+0x68>)
 8001364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001368:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <FLASH_PageErase+0x68>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800137a:	490a      	ldr	r1, [pc, #40]	; (80013a4 <FLASH_PageErase+0x68>)
 800137c:	4313      	orrs	r3, r2
 800137e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <FLASH_PageErase+0x68>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <FLASH_PageErase+0x68>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <FLASH_PageErase+0x68>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <FLASH_PageErase+0x68>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6153      	str	r3, [r2, #20]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40022000 	.word	0x40022000

080013a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <FLASH_FlushCaches+0x80>)
 80013b0:	7f1b      	ldrb	r3, [r3, #28]
 80013b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d002      	beq.n	80013c0 <FLASH_FlushCaches+0x18>
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d111      	bne.n	80013e4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <FLASH_FlushCaches+0x84>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <FLASH_FlushCaches+0x84>)
 80013c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <FLASH_FlushCaches+0x84>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <FLASH_FlushCaches+0x84>)
 80013d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <FLASH_FlushCaches+0x84>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <FLASH_FlushCaches+0x84>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d002      	beq.n	80013f0 <FLASH_FlushCaches+0x48>
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d111      	bne.n	8001414 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <FLASH_FlushCaches+0x84>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <FLASH_FlushCaches+0x84>)
 80013f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <FLASH_FlushCaches+0x84>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <FLASH_FlushCaches+0x84>)
 8001402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001406:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <FLASH_FlushCaches+0x84>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <FLASH_FlushCaches+0x84>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <FLASH_FlushCaches+0x80>)
 8001416:	2200      	movs	r2, #0
 8001418:	771a      	strb	r2, [r3, #28]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000000c 	.word	0x2000000c
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e17f      	b.n	8001740 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8171 	beq.w	800173a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <HAL_GPIO_Init+0x48>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	2b11      	cmp	r3, #17
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d118      	bne.n	8001518 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014ec:	2201      	movs	r2, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f003 0201 	and.w	r2, r3, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x128>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	6939      	ldr	r1, [r7, #16]
 800159c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0203 	and.w	r2, r3, #3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80ac 	beq.w	800173a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b5e      	ldr	r3, [pc, #376]	; (800175c <HAL_GPIO_Init+0x32c>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	4a5d      	ldr	r2, [pc, #372]	; (800175c <HAL_GPIO_Init+0x32c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6613      	str	r3, [r2, #96]	; 0x60
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <HAL_GPIO_Init+0x32c>)
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015fa:	4a59      	ldr	r2, [pc, #356]	; (8001760 <HAL_GPIO_Init+0x330>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x242>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4e      	ldr	r2, [pc, #312]	; (8001764 <HAL_GPIO_Init+0x334>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x23e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_GPIO_Init+0x338>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x23a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_GPIO_Init+0x33c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x236>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_GPIO_Init+0x340>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x232>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_GPIO_Init+0x344>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x22e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a49      	ldr	r2, [pc, #292]	; (8001778 <HAL_GPIO_Init+0x348>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x22a>
 8001656:	2306      	movs	r3, #6
 8001658:	e00c      	b.n	8001674 <HAL_GPIO_Init+0x244>
 800165a:	2307      	movs	r3, #7
 800165c:	e00a      	b.n	8001674 <HAL_GPIO_Init+0x244>
 800165e:	2305      	movs	r3, #5
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x244>
 8001662:	2304      	movs	r3, #4
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x244>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x244>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x244>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x244>
 8001672:	2300      	movs	r3, #0
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001684:	4936      	ldr	r1, [pc, #216]	; (8001760 <HAL_GPIO_Init+0x330>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_GPIO_Init+0x34c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_GPIO_Init+0x34c>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_GPIO_Init+0x34c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e0:	4a26      	ldr	r2, [pc, #152]	; (800177c <HAL_GPIO_Init+0x34c>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_GPIO_Init+0x34c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_GPIO_Init+0x34c>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_GPIO_Init+0x34c>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_GPIO_Init+0x34c>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f ae78 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001000 	.word	0x48001000
 8001774:	48001400 	.word	0x48001400
 8001778:	48001800 	.word	0x48001800
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017da:	d130      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e8:	d038      	beq.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2232      	movs	r2, #50	; 0x32
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001810:	e002      	b.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3b01      	subs	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001824:	d102      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f2      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001838:	d110      	bne.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e00f      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d007      	beq.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3d4      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	4ba1      	ldr	r3, [pc, #644]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001894:	4b9e      	ldr	r3, [pc, #632]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80e4 	beq.w	8001a74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4a>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	f040 808b 	bne.w	80019d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 8087 	bne.w	80019d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c2:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x62>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e3ac      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	4b8c      	ldr	r3, [pc, #560]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_RCC_OscConfig+0x7c>
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018f2:	e005      	b.n	8001900 <HAL_RCC_OscConfig+0x88>
 80018f4:	4b86      	ldr	r3, [pc, #536]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001900:	4293      	cmp	r3, r2
 8001902:	d223      	bcs.n	800194c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fd3f 	bl	800238c <RCC_SetFlashLatencyFromMSIRange>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e38d      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001918:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4977      	ldr	r1, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	4972      	ldr	r1, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
 800194a:	e025      	b.n	8001998 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	496a      	ldr	r1, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196a:	4b69      	ldr	r3, [pc, #420]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	4965      	ldr	r1, [pc, #404]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fcff 	bl	800238c <RCC_SetFlashLatencyFromMSIRange>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e34d      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001998:	f000 fc36 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800199c:	4601      	mov	r1, r0
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x29c>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa21 f303 	lsr.w	r3, r1, r3
 80019b4:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x2a0>)
 80019b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019b8:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x2a4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f939 	bl	8000c34 <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d052      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	e331      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d032      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019d8:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f976 	bl	8000cd4 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff f972 	bl	8000cd4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e31a      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fe:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a40      	ldr	r2, [pc, #256]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	493b      	ldr	r1, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	4936      	ldr	r1, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e01a      	b.n	8001a74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f943 	bl	8000cd4 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a52:	f7ff f93f 	bl	8000cd4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2e7      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1da>
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d074      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x21a>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d10e      	bne.n	8001aaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d10b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d064      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d160      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e2c4      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x24a>
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e01d      	b.n	8001afe <HAL_RCC_OscConfig+0x286>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x26e>
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0x286>
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x298>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f8e5 	bl	8000cd4 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0c:	e011      	b.n	8001b32 <HAL_RCC_OscConfig+0x2ba>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	080036a0 	.word	0x080036a0
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f8d8 	bl	8000cd4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e280      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	4baf      	ldr	r3, [pc, #700]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2a8>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8c8 	bl	8000cd4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8c4 	bl	8000cd4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e26c      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	4ba5      	ldr	r3, [pc, #660]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2d0>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d060      	beq.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x310>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d119      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d116      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b88:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x328>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e249      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b93      	ldr	r3, [pc, #588]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	4990      	ldr	r1, [pc, #576]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb4:	e040      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d023      	beq.n	8001c06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbe:	4b8c      	ldr	r3, [pc, #560]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a8b      	ldr	r2, [pc, #556]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f883 	bl	8000cd4 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f87f 	bl	8000cd4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e227      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	497c      	ldr	r1, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a79      	ldr	r2, [pc, #484]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f85f 	bl	8000cd4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f85b 	bl	8000cd4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e203      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2c:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d03c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c52:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f83a 	bl	8000cd4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff f836 	bl	8000cd4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1de      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c76:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ef      	beq.n	8001c64 <HAL_RCC_OscConfig+0x3ec>
 8001c84:	e01b      	b.n	8001cbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f81d 	bl	8000cd4 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f819 	bl	8000cd4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1c1      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ef      	bne.n	8001c9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80a6 	beq.w	8001e18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf8:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_RCC_OscConfig+0x57c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d118      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_RCC_OscConfig+0x57c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <HAL_RCC_OscConfig+0x57c>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d10:	f7fe ffe0 	bl	8000cd4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7fe ffdc 	bl	8000cd4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e184      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_RCC_OscConfig+0x57c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4d8>
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d4e:	e024      	b.n	8001d9a <HAL_RCC_OscConfig+0x522>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d110      	bne.n	8001d7a <HAL_RCC_OscConfig+0x502>
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d78:	e00f      	b.n	8001d9a <HAL_RCC_OscConfig+0x522>
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7fe ff97 	bl	8000cd4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe ff93 	bl	8000cd4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e139      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ed      	beq.n	8001daa <HAL_RCC_OscConfig+0x532>
 8001dce:	e01a      	b.n	8001e06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ff80 	bl	8000cd4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd6:	e00f      	b.n	8001df8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ff7c 	bl	8000cd4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d906      	bls.n	8001df8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e122      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e8      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a8a      	ldr	r2, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8108 	beq.w	8002032 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	f040 80d0 	bne.w	8001fcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e2c:	4b83      	ldr	r3, [pc, #524]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d130      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d127      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d11f      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e6c:	2a07      	cmp	r2, #7
 8001e6e:	bf14      	ite	ne
 8001e70:	2201      	movne	r2, #1
 8001e72:	2200      	moveq	r2, #0
 8001e74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d06e      	beq.n	8001f80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d069      	beq.n	8001f7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b7      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a5c      	ldr	r2, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed0:	f7fe ff00 	bl	8000cd4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe fefc 	bl	8000cd4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0a4      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eea:	4b54      	ldr	r3, [pc, #336]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x7c8>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f10:	0212      	lsls	r2, r2, #8
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f18:	0852      	lsrs	r2, r2, #1
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	0552      	lsls	r2, r2, #21
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f24:	0852      	lsrs	r2, r2, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0652      	lsls	r2, r2, #25
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f30:	0912      	lsrs	r2, r2, #4
 8001f32:	0452      	lsls	r2, r2, #17
 8001f34:	430a      	orrs	r2, r1
 8001f36:	4941      	ldr	r1, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3e      	ldr	r2, [pc, #248]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f48:	4b3c      	ldr	r3, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a3b      	ldr	r2, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f54:	f7fe febe 	bl	8000cd4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7fe feba 	bl	8000cd4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e062      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b33      	ldr	r3, [pc, #204]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7a:	e05a      	b.n	8002032 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e059      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f80:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d152      	bne.n	8002032 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa4:	f7fe fe96 	bl	8000cd4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fe92 	bl	8000cd4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e03a      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x734>
 8001fca:	e032      	b.n	8002032 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d02d      	beq.n	800202e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7fe fe65 	bl	8000cd4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fe61 	bl	8000cd4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x7c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x796>
 800202c:	e001      	b.n	8002032 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	f99d808c 	.word	0xf99d808c

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0c8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4961      	ldr	r1, [pc, #388]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b0      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d04c      	beq.n	800212e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209c:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d121      	bne.n	80020ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e09e      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d115      	bne.n	80020ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e092      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e086      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e07e      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 0203 	bic.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	493f      	ldr	r1, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fe:	f7fe fde9 	bl	8000cd4 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002104:	e00a      	b.n	800211c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002106:	f7fe fde5 	bl	8000cd4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e066      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 020c 	and.w	r2, r3, #12
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	429a      	cmp	r2, r3
 800212c:	d1eb      	bne.n	8002106 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213a:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	492c      	ldr	r1, [pc, #176]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d210      	bcs.n	800217c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4924      	ldr	r1, [pc, #144]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e036      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4918      	ldr	r1, [pc, #96]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4910      	ldr	r1, [pc, #64]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ba:	f000 f825 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021be:	4601      	mov	r1, r0
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	fa21 f303 	lsr.w	r3, r1, r3
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fd28 	bl	8000c34 <HAL_InitTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80021e8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080036a0 	.word	0x080036a0
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002220:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x34>
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d121      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d11e      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e005      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d102      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	e004      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d101      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_GetSysClockFreq+0x110>)
 800228e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d133      	bne.n	80022fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0xa4>
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80022aa:	e005      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ae:	617b      	str	r3, [r7, #20]
      break;
 80022b0:	e005      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_GetSysClockFreq+0x110>)
 80022b4:	617b      	str	r3, [r7, #20]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	617b      	str	r3, [r7, #20]
      break;
 80022bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	3301      	adds	r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	fb02 f203 	mul.w	r2, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_GetSysClockFreq+0x104>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0e5b      	lsrs	r3, r3, #25
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022fe:	69bb      	ldr	r3, [r7, #24]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3724      	adds	r7, #36	; 0x24
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40021000 	.word	0x40021000
 8002310:	080036b8 	.word	0x080036b8
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_GetHCLKFreq+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002338:	f7ff fff0 	bl	800231c <HAL_RCC_GetHCLKFreq>
 800233c:	4601      	mov	r1, r0
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x28>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	080036b0 	.word	0x080036b0

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002364:	f7ff ffda 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0adb      	lsrs	r3, r3, #11
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	080036b0 	.word	0x080036b0

0800238c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023a4:	f7ff fa04 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80023a8:	6178      	str	r0, [r7, #20]
 80023aa:	e014      	b.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	4a24      	ldr	r2, [pc, #144]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	; 0x58
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023c4:	f7ff f9f4 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80023c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d10b      	bne.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d919      	bls.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2ba0      	cmp	r3, #160	; 0xa0
 80023e8:	d902      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ea:	2302      	movs	r3, #2
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	e013      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	e010      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d902      	bls.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023fc:	2303      	movs	r3, #3
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e00a      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d102      	bne.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e004      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b70      	cmp	r3, #112	; 0x70
 8002412:	d101      	bne.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002414:	2301      	movs	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002454:	2300      	movs	r3, #0
 8002456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002458:	2300      	movs	r3, #0
 800245a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03f      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002470:	d01c      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d802      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800247c:	e01f      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800247e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002482:	d003      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002488:	d01c      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800248a:	e018      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800248c:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a84      	ldr	r2, [pc, #528]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002498:	e015      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fab9 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024aa:	e00c      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3320      	adds	r3, #32
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fba0 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024bc:	e003      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	74fb      	strb	r3, [r7, #19]
      break;
 80024c2:	e000      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80024c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024da:	4972      	ldr	r1, [pc, #456]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024e2:	e001      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03f      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d01c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002502:	d802      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002508:	e01f      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800250a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800250e:	d003      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002510:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002514:	d01c      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002516:	e018      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002524:	e015      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa73 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002536:	e00c      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3320      	adds	r3, #32
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fb5a 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002548:	e003      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	74fb      	strb	r3, [r7, #19]
      break;
 800254e:	e000      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002558:	4b52      	ldr	r3, [pc, #328]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	494f      	ldr	r1, [pc, #316]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800256e:	e001      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a0 	beq.w	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a40      	ldr	r2, [pc, #256]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	; 0x58
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fb86 	bl	8000cd4 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ca:	e009      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7fe fb82 	bl	8000cd4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	74fb      	strb	r3, [r7, #19]
        break;
 80025de:	e005      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ef      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d15c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01f      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d019      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fb41 	bl	8000cd4 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002654:	e00b      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fb3d 	bl	8000cd4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d902      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	74fb      	strb	r3, [r7, #19]
            break;
 800266c:	e006      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ec      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	4904      	ldr	r1, [pc, #16]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800269a:	e009      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
 80026a0:	e006      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b0:	7c7b      	ldrb	r3, [r7, #17]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b9e      	ldr	r3, [pc, #632]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	4a9d      	ldr	r2, [pc, #628]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ce:	4b98      	ldr	r3, [pc, #608]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f023 0203 	bic.w	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	4994      	ldr	r1, [pc, #592]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f0:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 020c 	bic.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	498c      	ldr	r1, [pc, #560]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002712:	4b87      	ldr	r3, [pc, #540]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	4983      	ldr	r1, [pc, #524]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002734:	4b7e      	ldr	r3, [pc, #504]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	497b      	ldr	r1, [pc, #492]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002764:	4972      	ldr	r1, [pc, #456]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	496a      	ldr	r1, [pc, #424]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	4961      	ldr	r1, [pc, #388]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027bc:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ca:	4959      	ldr	r1, [pc, #356]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027de:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	4950      	ldr	r1, [pc, #320]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	4948      	ldr	r1, [pc, #288]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	493f      	ldr	r1, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d028      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	4937      	ldr	r1, [pc, #220]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002862:	d106      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a31      	ldr	r2, [pc, #196]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286e:	60d3      	str	r3, [r2, #12]
 8002870:	e011      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800287a:	d10c      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f8c8 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	491f      	ldr	r1, [pc, #124]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028cc:	60d3      	str	r3, [r2, #12]
 80028ce:	e011      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f899 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02b      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291e:	d109      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
 800292c:	e014      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800293c:	d10c      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f867 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002972:	4928      	ldr	r1, [pc, #160]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002982:	d10d      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2102      	movs	r1, #2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f844 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	74bb      	strb	r3, [r7, #18]
 800299e:	e011      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3320      	adds	r3, #32
 80029ae:	2102      	movs	r1, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f921 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a02:	4904      	ldr	r1, [pc, #16]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a26:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a32:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
       ||
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
       ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d044      	beq.n	8002ae8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e041      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d00c      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x6e>
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d013      	beq.n	8002a98 <RCCEx_PLLSAI1_Config+0x80>
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d120      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a74:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11d      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e01a      	b.n	8002abc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a86:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e013      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab4:	e006      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e004      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002abc:	bf00      	nop
 8002abe:	e002      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac0:	bf00      	nop
 8002ac2:	e000      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002acc:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	4944      	ldr	r1, [pc, #272]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d17d      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe f8eb 	bl	8000cd4 <HAL_GetTick>
 8002afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b00:	e009      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b02:	f7fe f8e7 	bl	8000cd4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d902      	bls.n	8002b16 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	73fb      	strb	r3, [r7, #15]
        break;
 8002b14:	e005      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ef      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d160      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	0211      	lsls	r1, r2, #8
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68d2      	ldr	r2, [r2, #12]
 8002b44:	0912      	lsrs	r2, r2, #4
 8002b46:	0452      	lsls	r2, r2, #17
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	492a      	ldr	r1, [pc, #168]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	610b      	str	r3, [r1, #16]
 8002b50:	e027      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d112      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
 8002b68:	0211      	lsls	r1, r2, #8
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6912      	ldr	r2, [r2, #16]
 8002b6e:	0852      	lsrs	r2, r2, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0552      	lsls	r2, r2, #21
 8002b74:	430a      	orrs	r2, r1
 8002b76:	491f      	ldr	r1, [pc, #124]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	610b      	str	r3, [r1, #16]
 8002b7c:	e011      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	0211      	lsls	r1, r2, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6952      	ldr	r2, [r2, #20]
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0652      	lsls	r2, r2, #25
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe f891 	bl	8000cd4 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb6:	f7fe f88d 	bl	8000cd4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc8:	e005      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c06:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10d      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
       ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
       ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d044      	beq.n	8002cc8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e041      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d00c      	beq.n	8002c66 <RCCEx_PLLSAI2_Config+0x6e>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d013      	beq.n	8002c78 <RCCEx_PLLSAI2_Config+0x80>
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d120      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c54:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c64:	e01a      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e013      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10f      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c84:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c94:	e006      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9a:	e004      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e002      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	4939      	ldr	r1, [pc, #228]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d167      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a35      	ldr	r2, [pc, #212]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fd fffb 	bl	8000cd4 <HAL_GetTick>
 8002cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ce0:	e009      	b.n	8002cf6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce2:	f7fd fff7 	bl	8000cd4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d902      	bls.n	8002cf6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf4:	e005      	b.n	8002d02 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ef      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d14a      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d111      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	0211      	lsls	r1, r2, #8
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68d2      	ldr	r2, [r2, #12]
 8002d24:	0912      	lsrs	r2, r2, #4
 8002d26:	0452      	lsls	r2, r2, #17
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	491f      	ldr	r1, [pc, #124]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	614b      	str	r3, [r1, #20]
 8002d30:	e011      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6892      	ldr	r2, [r2, #8]
 8002d42:	0211      	lsls	r1, r2, #8
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6912      	ldr	r2, [r2, #16]
 8002d48:	0852      	lsrs	r2, r2, #1
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	0652      	lsls	r2, r2, #25
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	4915      	ldr	r1, [pc, #84]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fd ffb7 	bl	8000cd4 <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d68:	e009      	b.n	8002d7e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6a:	f7fd ffb3 	bl	8000cd4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d902      	bls.n	8002d7e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8002d7c:	e005      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ef      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e040      	b.n	8002e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fe40 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f82c 	bl	8002e48 <UART_SetConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e022      	b.n	8002e40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 faaa 	bl	800335c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb31 	bl	80034a0 <UART_CheckIdleState>
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e4c:	b088      	sub	sp, #32
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4bac      	ldr	r3, [pc, #688]	; (8003128 <UART_SetConfig+0x2e0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	69f9      	ldr	r1, [r7, #28]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4aa2      	ldr	r2, [pc, #648]	; (800312c <UART_SetConfig+0x2e4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a99      	ldr	r2, [pc, #612]	; (8003130 <UART_SetConfig+0x2e8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d121      	bne.n	8002f14 <UART_SetConfig+0xcc>
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <UART_SetConfig+0x2ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d816      	bhi.n	8002f0c <UART_SetConfig+0xc4>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x9c>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002efb 	.word	0x08002efb
 8002ef0:	08002f07 	.word	0x08002f07
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e0e8      	b.n	80030cc <UART_SetConfig+0x284>
 8002efa:	2302      	movs	r3, #2
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e0e5      	b.n	80030cc <UART_SetConfig+0x284>
 8002f00:	2304      	movs	r3, #4
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	e0e2      	b.n	80030cc <UART_SetConfig+0x284>
 8002f06:	2308      	movs	r3, #8
 8002f08:	76fb      	strb	r3, [r7, #27]
 8002f0a:	e0df      	b.n	80030cc <UART_SetConfig+0x284>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	76fb      	strb	r3, [r7, #27]
 8002f10:	bf00      	nop
 8002f12:	e0db      	b.n	80030cc <UART_SetConfig+0x284>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a87      	ldr	r2, [pc, #540]	; (8003138 <UART_SetConfig+0x2f0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d134      	bne.n	8002f88 <UART_SetConfig+0x140>
 8002f1e:	4b85      	ldr	r3, [pc, #532]	; (8003134 <UART_SetConfig+0x2ec>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d829      	bhi.n	8002f80 <UART_SetConfig+0x138>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0xec>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08002f81 	.word	0x08002f81
 8002f3c:	08002f81 	.word	0x08002f81
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f75 	.word	0x08002f75
 8002f48:	08002f81 	.word	0x08002f81
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002f81 	.word	0x08002f81
 8002f54:	08002f6f 	.word	0x08002f6f
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f81 	.word	0x08002f81
 8002f64:	08002f7b 	.word	0x08002f7b
 8002f68:	2300      	movs	r3, #0
 8002f6a:	76fb      	strb	r3, [r7, #27]
 8002f6c:	e0ae      	b.n	80030cc <UART_SetConfig+0x284>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	76fb      	strb	r3, [r7, #27]
 8002f72:	e0ab      	b.n	80030cc <UART_SetConfig+0x284>
 8002f74:	2304      	movs	r3, #4
 8002f76:	76fb      	strb	r3, [r7, #27]
 8002f78:	e0a8      	b.n	80030cc <UART_SetConfig+0x284>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	76fb      	strb	r3, [r7, #27]
 8002f7e:	e0a5      	b.n	80030cc <UART_SetConfig+0x284>
 8002f80:	2310      	movs	r3, #16
 8002f82:	76fb      	strb	r3, [r7, #27]
 8002f84:	bf00      	nop
 8002f86:	e0a1      	b.n	80030cc <UART_SetConfig+0x284>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <UART_SetConfig+0x2f4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d120      	bne.n	8002fd4 <UART_SetConfig+0x18c>
 8002f92:	4b68      	ldr	r3, [pc, #416]	; (8003134 <UART_SetConfig+0x2ec>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d00f      	beq.n	8002fc0 <UART_SetConfig+0x178>
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d802      	bhi.n	8002faa <UART_SetConfig+0x162>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <UART_SetConfig+0x16c>
 8002fa8:	e010      	b.n	8002fcc <UART_SetConfig+0x184>
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d005      	beq.n	8002fba <UART_SetConfig+0x172>
 8002fae:	2b30      	cmp	r3, #48	; 0x30
 8002fb0:	d009      	beq.n	8002fc6 <UART_SetConfig+0x17e>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x184>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	e088      	b.n	80030cc <UART_SetConfig+0x284>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	76fb      	strb	r3, [r7, #27]
 8002fbe:	e085      	b.n	80030cc <UART_SetConfig+0x284>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e082      	b.n	80030cc <UART_SetConfig+0x284>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e07f      	b.n	80030cc <UART_SetConfig+0x284>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	bf00      	nop
 8002fd2:	e07b      	b.n	80030cc <UART_SetConfig+0x284>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a59      	ldr	r2, [pc, #356]	; (8003140 <UART_SetConfig+0x2f8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d120      	bne.n	8003020 <UART_SetConfig+0x1d8>
 8002fde:	4b55      	ldr	r3, [pc, #340]	; (8003134 <UART_SetConfig+0x2ec>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d00f      	beq.n	800300c <UART_SetConfig+0x1c4>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d802      	bhi.n	8002ff6 <UART_SetConfig+0x1ae>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <UART_SetConfig+0x1b8>
 8002ff4:	e010      	b.n	8003018 <UART_SetConfig+0x1d0>
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d005      	beq.n	8003006 <UART_SetConfig+0x1be>
 8002ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8002ffc:	d009      	beq.n	8003012 <UART_SetConfig+0x1ca>
 8002ffe:	e00b      	b.n	8003018 <UART_SetConfig+0x1d0>
 8003000:	2300      	movs	r3, #0
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e062      	b.n	80030cc <UART_SetConfig+0x284>
 8003006:	2302      	movs	r3, #2
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e05f      	b.n	80030cc <UART_SetConfig+0x284>
 800300c:	2304      	movs	r3, #4
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e05c      	b.n	80030cc <UART_SetConfig+0x284>
 8003012:	2308      	movs	r3, #8
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e059      	b.n	80030cc <UART_SetConfig+0x284>
 8003018:	2310      	movs	r3, #16
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	bf00      	nop
 800301e:	e055      	b.n	80030cc <UART_SetConfig+0x284>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a47      	ldr	r2, [pc, #284]	; (8003144 <UART_SetConfig+0x2fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d124      	bne.n	8003074 <UART_SetConfig+0x22c>
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <UART_SetConfig+0x2ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d012      	beq.n	8003060 <UART_SetConfig+0x218>
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d802      	bhi.n	8003046 <UART_SetConfig+0x1fe>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <UART_SetConfig+0x20c>
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x224>
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	d006      	beq.n	800305a <UART_SetConfig+0x212>
 800304c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003050:	d009      	beq.n	8003066 <UART_SetConfig+0x21e>
 8003052:	e00b      	b.n	800306c <UART_SetConfig+0x224>
 8003054:	2300      	movs	r3, #0
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e038      	b.n	80030cc <UART_SetConfig+0x284>
 800305a:	2302      	movs	r3, #2
 800305c:	76fb      	strb	r3, [r7, #27]
 800305e:	e035      	b.n	80030cc <UART_SetConfig+0x284>
 8003060:	2304      	movs	r3, #4
 8003062:	76fb      	strb	r3, [r7, #27]
 8003064:	e032      	b.n	80030cc <UART_SetConfig+0x284>
 8003066:	2308      	movs	r3, #8
 8003068:	76fb      	strb	r3, [r7, #27]
 800306a:	e02f      	b.n	80030cc <UART_SetConfig+0x284>
 800306c:	2310      	movs	r3, #16
 800306e:	76fb      	strb	r3, [r7, #27]
 8003070:	bf00      	nop
 8003072:	e02b      	b.n	80030cc <UART_SetConfig+0x284>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2c      	ldr	r2, [pc, #176]	; (800312c <UART_SetConfig+0x2e4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d124      	bne.n	80030c8 <UART_SetConfig+0x280>
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <UART_SetConfig+0x2ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d012      	beq.n	80030b4 <UART_SetConfig+0x26c>
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d802      	bhi.n	800309a <UART_SetConfig+0x252>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <UART_SetConfig+0x260>
 8003098:	e012      	b.n	80030c0 <UART_SetConfig+0x278>
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d006      	beq.n	80030ae <UART_SetConfig+0x266>
 80030a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x272>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x278>
 80030a8:	2300      	movs	r3, #0
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e00e      	b.n	80030cc <UART_SetConfig+0x284>
 80030ae:	2302      	movs	r3, #2
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x284>
 80030b4:	2304      	movs	r3, #4
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e008      	b.n	80030cc <UART_SetConfig+0x284>
 80030ba:	2308      	movs	r3, #8
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e005      	b.n	80030cc <UART_SetConfig+0x284>
 80030c0:	2310      	movs	r3, #16
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	bf00      	nop
 80030c6:	e001      	b.n	80030cc <UART_SetConfig+0x284>
 80030c8:	2310      	movs	r3, #16
 80030ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a16      	ldr	r2, [pc, #88]	; (800312c <UART_SetConfig+0x2e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f040 8087 	bne.w	80031e6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030d8:	7efb      	ldrb	r3, [r7, #27]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d836      	bhi.n	800314c <UART_SetConfig+0x304>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0x29c>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003109 	.word	0x08003109
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	08003111 	.word	0x08003111
 80030f0:	0800314d 	.word	0x0800314d
 80030f4:	08003117 	.word	0x08003117
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	0800314d 	.word	0x0800314d
 8003100:	0800314d 	.word	0x0800314d
 8003104:	0800311f 	.word	0x0800311f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7ff f914 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 800310c:	6178      	str	r0, [r7, #20]
        break;
 800310e:	e022      	b.n	8003156 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <UART_SetConfig+0x300>)
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	e01f      	b.n	8003156 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003116:	f7ff f877 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800311a:	6178      	str	r0, [r7, #20]
        break;
 800311c:	e01b      	b.n	8003156 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	617b      	str	r3, [r7, #20]
        break;
 8003124:	e017      	b.n	8003156 <UART_SetConfig+0x30e>
 8003126:	bf00      	nop
 8003128:	efff69f3 	.word	0xefff69f3
 800312c:	40008000 	.word	0x40008000
 8003130:	40013800 	.word	0x40013800
 8003134:	40021000 	.word	0x40021000
 8003138:	40004400 	.word	0x40004400
 800313c:	40004800 	.word	0x40004800
 8003140:	40004c00 	.word	0x40004c00
 8003144:	40005000 	.word	0x40005000
 8003148:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	76bb      	strb	r3, [r7, #26]
        break;
 8003154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80f1 	beq.w	8003340 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d305      	bcc.n	800317a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	76bb      	strb	r3, [r7, #26]
 800317e:	e0df      	b.n	8003340 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4619      	mov	r1, r3
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	0214      	lsls	r4, r2, #8
 8003192:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003196:	020b      	lsls	r3, r1, #8
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6852      	ldr	r2, [r2, #4]
 800319c:	0852      	lsrs	r2, r2, #1
 800319e:	4611      	mov	r1, r2
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	eb13 0b01 	adds.w	fp, r3, r1
 80031a8:	eb44 0c02 	adc.w	ip, r4, r2
 80031ac:	4658      	mov	r0, fp
 80031ae:	4661      	mov	r1, ip
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f04f 0400 	mov.w	r4, #0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	f7fd f80c 	bl	80001d8 <__aeabi_uldivmod>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031cc:	d308      	bcc.n	80031e0 <UART_SetConfig+0x398>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d4:	d204      	bcs.n	80031e0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e0af      	b.n	8003340 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	76bb      	strb	r3, [r7, #26]
 80031e4:	e0ac      	b.n	8003340 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d15b      	bne.n	80032a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80031f0:	7efb      	ldrb	r3, [r7, #27]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d827      	bhi.n	8003246 <UART_SetConfig+0x3fe>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x3b4>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f888 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8003224:	6178      	str	r0, [r7, #20]
        break;
 8003226:	e013      	b.n	8003250 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7ff f89a 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 800322c:	6178      	str	r0, [r7, #20]
        break;
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <UART_SetConfig+0x510>)
 8003232:	617b      	str	r3, [r7, #20]
        break;
 8003234:	e00c      	b.n	8003250 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7fe ffe7 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800323a:	6178      	str	r0, [r7, #20]
        break;
 800323c:	e008      	b.n	8003250 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	617b      	str	r3, [r7, #20]
        break;
 8003244:	e004      	b.n	8003250 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	76bb      	strb	r3, [r7, #26]
        break;
 800324e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d074      	beq.n	8003340 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	005a      	lsls	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d916      	bls.n	80032a2 <UART_SetConfig+0x45a>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d212      	bcs.n	80032a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f023 030f 	bic.w	r3, r3, #15
 8003284:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	b29a      	uxth	r2, r3
 8003292:	89fb      	ldrh	r3, [r7, #14]
 8003294:	4313      	orrs	r3, r2
 8003296:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	89fa      	ldrh	r2, [r7, #14]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e04e      	b.n	8003340 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	76bb      	strb	r3, [r7, #26]
 80032a6:	e04b      	b.n	8003340 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a8:	7efb      	ldrb	r3, [r7, #27]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d827      	bhi.n	80032fe <UART_SetConfig+0x4b6>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0x46c>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080032ff 	.word	0x080032ff
 80032c4:	080032ef 	.word	0x080032ef
 80032c8:	080032ff 	.word	0x080032ff
 80032cc:	080032ff 	.word	0x080032ff
 80032d0:	080032ff 	.word	0x080032ff
 80032d4:	080032f7 	.word	0x080032f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7ff f82c 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 80032dc:	6178      	str	r0, [r7, #20]
        break;
 80032de:	e013      	b.n	8003308 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff f83e 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80032e4:	6178      	str	r0, [r7, #20]
        break;
 80032e6:	e00f      	b.n	8003308 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <UART_SetConfig+0x510>)
 80032ea:	617b      	str	r3, [r7, #20]
        break;
 80032ec:	e00c      	b.n	8003308 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ee:	f7fe ff8b 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80032f2:	6178      	str	r0, [r7, #20]
        break;
 80032f4:	e008      	b.n	8003308 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fa:	617b      	str	r3, [r7, #20]
        break;
 80032fc:	e004      	b.n	8003308 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	76bb      	strb	r3, [r7, #26]
        break;
 8003306:	bf00      	nop
    }

    if (pclk != 0U)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085a      	lsrs	r2, r3, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d908      	bls.n	800333c <UART_SetConfig+0x4f4>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d204      	bcs.n	800333c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e001      	b.n	8003340 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800334c:	7ebb      	ldrb	r3, [r7, #26]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003358:	00f42400 	.word	0x00f42400

0800335c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345a:	d10a      	bne.n	8003472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034ae:	f7fd fc11 	bl	8000cd4 <HAL_GetTick>
 80034b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d10e      	bne.n	80034e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f82a 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e020      	b.n	8003522 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d10e      	bne.n	800350c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f814 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e00a      	b.n	8003522 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e05d      	b.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d059      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fd fbc6 	bl	8000cd4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <UART_WaitOnFlagUntilTimeout+0x30>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11b      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003568:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e042      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02b      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ae:	d123      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e00f      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	429a      	cmp	r2, r3
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d092      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4e0d      	ldr	r6, [pc, #52]	; (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003626:	1ba4      	subs	r4, r4, r6
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2500      	movs	r5, #0
 800362c:	42a5      	cmp	r5, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4e0b      	ldr	r6, [pc, #44]	; (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	; (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f828 	bl	8003688 <_init>
 8003638:	1ba4      	subs	r4, r4, r6
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2500      	movs	r5, #0
 800363e:	42a5      	cmp	r5, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003648:	4798      	blx	r3
 800364a:	3501      	adds	r5, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003652:	4798      	blx	r3
 8003654:	3501      	adds	r5, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036f0 	.word	0x080036f0
 800365c:	080036f0 	.word	0x080036f0
 8003660:	080036f0 	.word	0x080036f0
 8003664:	080036f4 	.word	0x080036f4

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <strcpy>:
 8003678:	4603      	mov	r3, r0
 800367a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800367e:	f803 2b01 	strb.w	r2, [r3], #1
 8003682:	2a00      	cmp	r2, #0
 8003684:	d1f9      	bne.n	800367a <strcpy+0x2>
 8003686:	4770      	bx	lr

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
